<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>roofit manual</title>
    <link href="/roofit_manual/"/>
    <url>/roofit_manual/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/downloadbutton.css"><p><a href="/download/roofit_manual.pdf" class="download-button">下载文章</a><br><a href="/download/RooFit_Users_Manual_v2.9.pdf" class="download-button">RooFit Manual</a><br><a href="https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html">ROOTUsersGuide</a> root的手册<br><a href="https://root.cern.ch/doc/master/group__Tutorials.html">ROOT: Tutorials </a> 会有一些实例代码</p><h2 id="1-安装和设置RooFit"><a href="#1-安装和设置RooFit" class="headerlink" title="1 安装和设置RooFit"></a>1 安装和设置RooFit</h2><h3 id="1-1-安装root和roofit"><a href="#1-1-安装root和roofit" class="headerlink" title="1.1 安装root和roofit"></a>1.1 安装root和roofit</h3><p>roofit库是标准root发行版的一部分，并且预编译在二进制发行版中，可以通过<code>root.cern.ch</code>获取。如果您从源代码发行版编译 ROOT，则必须在运行 configure 时使用标志 –enable-roofit。你可以在<a href="https://root.cern/install/">Installing ROOT</a>链接中找到安装适合你系统的方法，推荐Mac用户使用package manager进行安装，例如<a href="https://brew.sh/">homebrew</a>，根据介绍安装完之后就可以在终端使用<code> brew install root</code>自动安装ROOT了。除此之外，还有其他很多应用都能使用brew安装，有点像一个应用商店一样，适合新手使用。</p><h3 id="1-2-设置交互式root环境"><a href="#1-2-设置交互式root环境" class="headerlink" title="1.2 设置交互式root环境"></a>1.2 设置交互式root环境</h3><p>只要在命令行引用了 RooFit 类之一，ROOT 就会自动加载 RooFit 库 libRooFitCore 和 libRooFit。方便起见，建议你ROOT登录脚本中添加下面的命令<code>using namespace RooFit;</code>，这样你就能在命令行中使用RooFit命名空间中的辅助函数了。这个命令也会自动加载RooFit库。这篇指导的所有例子都是建立在你已经加载RooFit命名空间的基础上的。  </p><blockquote><p><code>using namespace RooFit;</code></p></blockquote><p>一般情况下你需要将你的程序写入到一个程序文件中，在这个程序开头你需要加入一些头文件和命名空间，这样你在使用<code>root yourprogm.C</code>的时候就能加载RooFit库了</p><h3 id="1-3-root使用补充"><a href="#1-3-root使用补充" class="headerlink" title="1.3 root使用补充"></a>1.3 root使用补充</h3><p>Root 中的命令都是由<code>.</code>开始的，包括一些linux shell 命令比如像<code>.ls</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">root<span class="hljs-selector-attr">[]</span> .?  <span class="hljs-comment">//this command will list all the Cling commands</span><br>root<span class="hljs-selector-attr">[]</span> <span class="hljs-selector-class">.L</span> &lt;filename&gt;  <span class="hljs-comment">//load [filename]</span><br>root<span class="hljs-selector-attr">[]</span> <span class="hljs-selector-class">.x</span> &lt;filename&gt;  <span class="hljs-comment">//load and execute [filename]</span><br>root<span class="hljs-selector-attr">[]</span> <span class="hljs-selector-class">.ls</span>    <span class="hljs-comment">//用root打开一个文件之后可以用这个命令看里面的文件内容</span><br></code></pre></td></tr></table></figure><h2 id="2-Getting-started"><a href="#2-Getting-started" class="headerlink" title="2 Getting started"></a>2 Getting started</h2><p>按你胃, 先上手做再说！这部分会带你做简单的模型去拟合数据。目的是让你熟悉一些基本概念，并且能快速地做一些有用的事情。在接下来的小节中我们会更仔细地探索RooFit几个方面。</p><h3 id="2-1-构建模型"><a href="#2-1-构建模型" class="headerlink" title="2.1 构建模型"></a>2.1 构建模型</h3><p>RooFit中一个关键概念是以面向对象的方式构建模型的。每个RooFit的类都有一个对应的数学对象：<code>RooRealVar</code>表示一个变量，<code>RooAbsReal</code>表示一个函数，<code>RooAbsPdf</code>表示一个概率密度函数（probability density function），等等。就算是最简单的数学函数也包含了很多对象——函数本身与其变量——RooFit模型也因此由许多对象组成。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span> ;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;Mean of Gaussian&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;Width of Gaussian&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooGaussian <span class="hljs-title function_">gauss</span><span class="hljs-params">(<span class="hljs-string">&quot;gauss&quot;</span>,<span class="hljs-string">&quot;gauss(x,mean,sigma)&quot;</span>,x,mean,sigma)</span>;<br></code></pre></td></tr></table></figure><p>在<code>gauss</code>用到的每个变量都用几个属性进行初始化：name, title, 范围和可选的初始值。用<code>RooRealVar</code>描述的变量有更多的属性在这个例子中没有展现出来，例如与变量关联的对称误差以及指定变量是常量还是浮动的标志。本质上，类<code>RooRealVar</code>收集所有与变量有关的属性。</p><p>代码的最后一行创建了一个高斯分布的概率密度函数，由<code>RooGaussian</code>实现。类<code>RooGaussian</code>描述了所有概率密度函数的共同属性。PDF 高斯有一个名称和一个标题，就像变量对象一样，并通过构造函数中传递的引用关联到变量 x、mean 和 sigma。</p><h3 id="2-2-模型可视化"><a href="#2-2-模型可视化" class="headerlink" title="2.2 模型可视化"></a>2.2 模型可视化</h3><p>通常我们最先想到的是看到这个模型。RooFit采取了比普通ROOT稍微正式一点的可视化方法。首先你需要定义一个“视图”，本质上是一个空的框架，包含<code>RooRealVar</code>中变量之一x作为横坐标轴，然后你要把你的模型gauss放进这个空白框架中，最后你再把这个视图画在ROOT TCanvas上：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">RooPlot* xframe = x.frame() ; <br>gauss.plotOn(xframe) ;      <br>xframe-&gt;Draw();            <br></code></pre></td></tr></table></figure><p><img src="/postfigure/roofit_manual/image-20241230194318643.png"></p><center>Figure 1 - 高斯pdf</center><p>结果看图1。需要注意的是，在定义或创建一个视图的时候并不需要特意去设置范围，会根据<code>RooRealVar</code>中定义的变量的范围自动设置，当然你也可以重新设置范围。另外，将gauss画在框架中时，也不用说明gauss是x的函数，可以在框架中找到这个信息，就很智能。</p><p>一个框架可以可视化多个对象（曲线，直方图），我们可以画两个不同sigma值的高斯曲线</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">RooPlot* xframe = x.frame() ; <br>gauss.plotOn(xframe) ; <br>sigma = <span class="hljs-number">2</span> ; <br>gauss.plotOn(xframe,LineColor(kRed)) ; <br>xframe-&gt;Draw(); <br></code></pre></td></tr></table></figure><p>这个例子中，在画完第一个gauss图像之后，我用赋值运算符改变了<code>RooRealVar</code>sigma的值。第二条曲线的颜色通过添加<code>LineColor(kRed)</code>参数传递给plotOn()变为红色。LineColor 是“命名参数”的一个示例。命名参数贯穿整个 RooFit 的使用，它提供一种方便且可读的方式来修改一些默认值。命名参数将在后面的部分中更详细地介绍。第二个代码片段的输出如图 2 所示。</p><p><img src="/postfigure/roofit_manual/image-20241230195113004.png"></p><center>Figure 2 - 不同宽度的高斯pdf</center><p>这个例子同时也展示了plotOn()方法会对PDF进行一个“冻结”的快照，如果一个pdf在画进去之后改变了形状，之前已经画进去的曲线不会发生改变。图2还展示了无论数值如何，<code>RooGaussian</code>总是归一化的。</p><h4 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary 1"></a>Summary 1</h4><p>从ROOT开发的第一天起，就决定使用一组编码约定。这样可以确保整个源代码的一致性。学习这些知识将帮助您确定正在处理的信息类型，并使您能够更好、更快地理解代码。下面是一些ROOT中的编码约定</p><p>类以 <strong><code>T</code></strong> 开头：**<code>TLine</code><strong>、</strong><code>TTree</code>**<br>非类类型以 <strong><code>_t</code></strong> 结尾：<code>Int_t</code><br>数据成员以 **<code>f</code>**： <code>fTree</code> 开头<br>成员函数以大写字母开头：<code>Loop（）</code><br>常量以 <strong><code>k</code></strong> 开头：<code>kInitialSize</code>、<code>kRed</code></p><p>同样的在RooFit的类也会有特殊的开头——都会以<code>Roo</code>为开头，因此如果你在后续的学习中看到这样的函数就可以了解他是在RooFit中的函数，你可以在<a href="https://root.cern.ch/doc/master/classRooGaussian.html">ROOT: RooGaussian Class Reference (cern.ch)</a>中找到对应函数的意思和使用方法，也可以在侧边栏中找到别的成员函数，或者在右上角搜索。活用这个网页你就能成为大师！</p><blockquote><p> RooGaussian::RooGaussian (const char * name, const char * title, RooAbsReal &amp; _x, RooAbsReal &amp; _mean, RooAbsReal &amp; _sigma)</p><p>RooRealVar::RooRealVar (const char * name,const char * title, double minValue, double maxValue,const char * unit &#x3D; “” )</p><p>RooRealVar::RooRealVar (const char * name,const char * title, double value, double minValue, double maxValue,const char * unit &#x3D; “” )</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>; <span class="hljs-comment">//设置自变量x，并设置定义域为[-10,10]</span><br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;Mean of Gaussian&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>; <span class="hljs-comment">//设置参数</span><br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;Width of Gaussian&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooGaussian <span class="hljs-title function_">gauss</span><span class="hljs-params">(<span class="hljs-string">&quot;gauss&quot;</span>,<span class="hljs-string">&quot;gauss(x,mean,sigma)&quot;</span>,x,mean,sigma)</span>; <span class="hljs-comment">//给RooGaussian传入三个参数，自变量x，中心值mean，宽度sigma</span><br>RooPlot* xframe = x.frame();<span class="hljs-comment">//创建一个以x这个变量为坐标的空坐标图，这个会直接获取你之前设置的x变量的范围定义你的坐标的范围，这里就是 -10～10</span><br>gauss.plotOn(xframe);<span class="hljs-comment">//将你之前创建的gauss函数画到你的坐标图中</span><br>xframe-&gt;Draw();<span class="hljs-comment">//将你这个图通过TCanvas“打印”出来  </span><br>sigma = <span class="hljs-number">2</span>;<br>gauss.plotOn(xframe,LineColor(kRed)) ; <br>xframe-&gt;Draw(); <br></code></pre></td></tr></table></figure><center> Summary 1 - 构建一个高斯分布的概率密度函数</center><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note 1"></a>Note 1</h4><ul><li><p>概率密度函数（Probability Density Function，PDF）是用于描述连续型随机变量的概率分布的函数。 随机变量 X 落在区间 [a, b] 的概率是：$P(a \leq X \leq b) &#x3D; \int_a^b f_X(x) , dx$，并且还需要满足归一性和非负性。</p></li><li><p>对于一个函数来说，需要自变量x和参数，对于自变量来说你需要设定一个范围，也就是函数的定义域，而对于参数来说，因为你需要用这个函数去拟合一些数据，那么就不可能一开始就确定这个函数，而是给他一个大致的范围让他去拟合，这个范围还需要根据你的拟合结果进行调整，也就是调参的过程。</p></li></ul><h3 id="2-3-输入数据"><a href="#2-3-输入数据" class="headerlink" title="2.3 输入数据"></a>2.3 输入数据</h3><p>通常来说，数据有两类：未分bin的，用ROOT中的TTree类表示，和分bin的，用ROOT中的TH1，TH2，TH3表示。RooFit可以处理这两种数据。用做统计身高做例子的话，unbinned 就是把每位同学的身高都记录下来，binned 就是画成条形统计图，分为不同区间去计数，每个区间就是一个bin。</p><h4 id="2-3-1-分bin的数据（直方图）"><a href="#2-3-1-分bin的数据（直方图）" class="headerlink" title="2.3.1 分bin的数据（直方图）"></a>2.3.1 分bin的数据（直方图）</h4><p>在RooFit中，分bin的数据由<code>RooDataHist</code>类表示，你可以将任何ROOT直方图的内容导入到<code>RooDataHist</code>对象中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">TH1* hh = (TH1*) gDirectory-&gt;Get(<span class="hljs-string">&quot;ahisto&quot;</span>);<br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooDataHist <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;dataset with x&quot;</span>,x,hh)</span>;<br></code></pre></td></tr></table></figure><p>note：代码从当前目录 (gDirectory) 中获取名为 “ahisto” 的直方图，并将其强制转换为 TH1* 类型的指针。在ROOT中，TH1 是表示一维直方图的类。  </p><p>创建了一个名为 “data” 的 RooDataHist 对象。它表示一个数据集，可以在RooFit中用于拟合或其他统计分析。<br>数据集用名称 “data” 和标题 “dataset with x” 构建。<br>此数据集根据变量 “x”（我们之前定义的变量）进行分箱，并使用先前获得的直方图 hh 填充。这意味着 hh 中的值将用于填充数据集的箱子。</p><p>当你导入ROOT直方图的时候，原直方图的bin是如何定义的同样也被导入了。<code>RooDataHist</code>比普通直方图更进一步的是，它将直方图的内容和一个或多个<code>RooRealVar</code>类型的RooFit变量关联起来。通过这种方式，它总知道直方图中存储了什么样的数据。</p><p><code>RooDataHist</code>可以和gauss函数一样被plotOn在画布上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">RooPlot* xframe = x.frame() ; <br>data.plotOn(xframe) ; <br>xframe-&gt;Draw() <br></code></pre></td></tr></table></figure><h4 id="2-3-2-未分bin的数据（树trees）"><a href="#2-3-2-未分bin的数据（树trees）" class="headerlink" title="2.3.2 未分bin的数据（树trees）"></a>2.3.2 未分bin的数据（树trees）</h4><p>未分bin的数据可以以同样的方式导入到RooFit，并存储到<code>RooDataSet</code>的类中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">TTree* tree = (TTree*) gDirectory-&gt;Get(<span class="hljs-string">&quot;atree&quot;</span>);<br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooDataSet <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;dataset with x&quot;</span>,tree,x)</span>;<br></code></pre></td></tr></table></figure><p>在这个例子中，假设 tree 有一个名为“x”的分支，因为 RooDataSet 构造函数将从与作为参数传递的 RooRealVar 同名的树分支中导入数据。RooDataSet 可以从类型为 Double_t、Float_t、Int_t、UInt_t 和 Bool_t 的分支导入数据，用于一个 RooRealVar 可观测量。如果分支不是 Double_t 类型，则数据将转换为 Double_t，因为这是 RooRealVar 的内部表示形式。无法从数组分支（如 Double_t[10]）导入数据。可以将整数类型的数据作为离散值观测量导入到 RooFit 中，这在第8章中会更详细地解释。</p><p>绘制未分 bin 的数据与绘制分 bin 的数据类似，不同之处在于现在您可以以任何您喜欢的 binning 来显示它，默认情况下是100个bins，下面设置了25个bins的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">RooPlot* xframe = x.frame();<br>data.plotOn(frame,Binning(<span class="hljs-number">25</span>));<br>frame-&gt;Draw();<br></code></pre></td></tr></table></figure><h4 id="2-3-3-working-with-data"><a href="#2-3-3-working-with-data" class="headerlink" title="2.3.3 working with data"></a>2.3.3 working with data</h4><p>在一般情况下，在RooFit中处理分组数据和未分组数据非常相似，因为RooDataSet（用于未分组数据）和RooDataHist（用于分组数据）都继承自一个共同的基类RooAbsData，该基类定义了一个通用的抽象数据样本接口。除少数例外，所有RooFit方法都接受抽象数据集作为输入参数，使得分组和未分组数据可以互换使用。本节中的示例始终处理一维数据集。然而，RooDataSet和RooDataHist都可以处理任意维数的数据。在接下来的章节中，我们将重新讨论数据集并解释如何处理多维数据。</p><h4 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary 2"></a>Summary 2</h4><p>下载测试用的root文件<a href="/download/chapt2.root" class="download-button">chapt2.root</a> 里面包含了两种类型的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">root -l chapt2.root</span> <br>root [0] <br>Attaching file chapt2.root as _file0...<br>(TFile *) 0x12758ae30<br>root [1] .ls<br>TFile**         chapt2.root<br> TFile*         chapt2.root<br>  KEY: RooDataSet       unbinnedData;1  Generated From gaussian PDF<br>  KEY: TH1F     binnedHist;1    Binned Histogram of X<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>TFile *file = TFile::Open(<span class="hljs-string">&quot;./chapt2.root&quot;</span>); <span class="hljs-comment">//打开root文件</span><br>TH1F *hist = (TH1F*)file-&gt;Get(<span class="hljs-string">&quot;binnedData&quot;</span>); <span class="hljs-comment">//从文件中获取名为 &quot;binnedHist&quot; 的 TH1F 对象</span><br>RooDataHist <span class="hljs-title function_">binnedData</span><span class="hljs-params">(<span class="hljs-string">&quot;binnedData&quot;</span>, <span class="hljs-string">&quot;binnedData&quot;</span>, x, hist)</span>;<br>TCanvas* c1 = new TCanvas(<span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;binned Data&quot;</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>c1-&gt;cd();<br>RooPlot* x1frame = x.frame();<br>binnedData.plotOn(x1frame); <span class="hljs-comment">//生成这个数据的时候的bin是20</span><br>x1frame-&gt;Draw();<br><br>TCanvas* c2 = new TCanvas(<span class="hljs-string">&quot;c2&quot;</span>, <span class="hljs-string">&quot;unbinned Data&quot;</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>c2-&gt;cd();<br>RooDataSet* unbinnedData = (RooDataSet*)file-&gt;Get(<span class="hljs-string">&quot;unbinnedData&quot;</span>);  <span class="hljs-comment">// 从文件中获取名为 &quot;unbinnedData&quot; 的 RooDataSet 对象</span><br>RooPlot* x2frame = x.frame();<br>unbinnedData-&gt;plotOn(x2frame,Binning(<span class="hljs-number">40</span>),MarkerColor(kRed)); <span class="hljs-comment">//如果不设置bin的话默认画出的图的bin是100</span><br>x2frame-&gt;Draw();<br></code></pre></td></tr></table></figure><p><img src="/postfigure/roofit_manual/image-20241230224832893.png" style="zoom:50%;" /><img src="/postfigure/roofit_manual/image-20241230224846866.png" style="zoom:50%;" /></p><center> Summary 2 - 画出binned和unbinned的数据</center><blockquote><p><em>你也可以用下面的生成程序，自定义生成出你自己的root数据文件play一下</em></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-string">&quot;mean of gaussian&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>, <span class="hljs-string">&quot;width of gaussian&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)</span>;<br><br><span class="hljs-comment">// Create Gaussian PDF</span><br>RooGaussian <span class="hljs-title function_">gauss</span><span class="hljs-params">(<span class="hljs-string">&quot;gauss&quot;</span>, <span class="hljs-string">&quot;gaussian PDF&quot;</span>, x, mean, sigma)</span>;<br><br><span class="hljs-comment">// Generate unbinned data</span><br>RooDataSet* data = gauss.generate(x, <span class="hljs-number">500</span>);<br><br><span class="hljs-comment">// Generate binned data</span><br>TH1F* binnedData = new TH1F(<span class="hljs-string">&quot;binnedData&quot;</span>, <span class="hljs-string">&quot;Binned Histogram of X&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>);<br>data-&gt;fillHistogram(binnedData, RooArgList(x));<br><br><span class="hljs-comment">// Create a ROOT file to save the datasets</span><br>TFile <span class="hljs-title function_">outFile</span><span class="hljs-params">(<span class="hljs-string">&quot;./output.root&quot;</span>, <span class="hljs-string">&quot;RECREATE&quot;</span>)</span>;<br><br><span class="hljs-comment">// Write datasets to the file</span><br>data-&gt;Write(<span class="hljs-string">&quot;unbinnedData&quot;</span>);<br>binnedData-&gt;Write(<span class="hljs-string">&quot;binnedData&quot;</span>);<br><br><span class="hljs-comment">// Close the file</span><br>outFile.Close();<br></code></pre></td></tr></table></figure><h4 id="Note-2"><a href="#Note-2" class="headerlink" title="Note 2"></a>Note 2</h4><ul><li>对于unbinned的数据自然能随意设置bin的数量，但对于binne的数据你只能用<code>Rebin()</code>来合并并减少bin的数量，而不能设置更多的bin，比如<code>Rebin(2)</code>就代表着每两个原始 bin 合并成一个新 bin</li><li>当我们想进行一些精细的拟合的时候往往需要unbinned的拟合，因为binned的数据会丢失部分数据细节，但相对的，拟合速度也会下降</li><li>unbinned的数据按道理来说像是分得无限细的binned的图，因此画出直方图的时候并不会这样操作，而是给他一个默认的bin值，从而更好地显示unbinned的数据。但是在拟合的时候还是会一个个数据点进行拟合。</li><li>如果你仔细看画出来的图你会发现，在低统计下的误差棒不是对称的。RooFit 默认显示泊松统计的 68% 置信区间，通常是不对称的，尤其是在低统计量下，如果直方图内容来自泊松过程，则可以更准确地反映每个箱中的统计不确定性。你可以选择将<code>DataError(RooAbsData::SumW2)</code>添加到<code>data.plotOn()</code>行来显示$\sqrt{N}$误差。这个选项只会影响数据集的可视化。</li></ul><h3 id="2-4-用模型拟合数据"><a href="#2-4-用模型拟合数据" class="headerlink" title="2.4 用模型拟合数据"></a>2.4 用模型拟合数据</h3><p>将模型拟合到数据中涉及从模型和数据构建检验统计量——最常见的选择是χ²和负对数似然——并针对所有未固定的参数最小化该检验统计量。RooFit中的默认拟合方法是对无分箱数据进行无分箱最大似然拟合(unbinned maximum likelihood fit)，对分箱数据进行分箱最大似然拟合(binned maximum likelihood fit)。</p><p>无论哪种情况，测试统计量都是由RooFit计算的，并且测试统计量的最小化是通过ROOT中的TMinuit实现的MINUIT来进行最小化和误差分析的。整个拟合过程的易用高级接口由类RooAbsPdf的fitTo()方法提供：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">gauss.fitTo(data)<br></code></pre></td></tr></table></figure><p>这条命令从高斯函数和给定的数据集中构建一个-log(L)函数，将其传递给MINUIT，MINUIT对其进行最小化并估计高斯参数的误差。fitTo()方法的输出在屏幕上产生熟悉的MINUIT输出：(注：新版本的root的拟合输出样式发生了变化，但输出内容没有变化)</p><p><img src="/postfigure/roofit_manual/image-20241231105451535.png"></p><center>Figure 3 - 拟合输出</center><p>拟合结果——新的参数值及其误差——会传回到表示高斯参数的RooRealVar对象中，如下面的代码片段所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mean.<span class="hljs-built_in">Print</span>() ;<br>RooRealVar::mean: <span class="hljs-number">-0.940910</span> +/- <span class="hljs-number">0.030400</span><br>sigma.<span class="hljs-built_in">Print</span>() ;<br>RooRealVar::sigma: <span class="hljs-number">3.0158</span> +/- <span class="hljs-number">0.022245</span><br></code></pre></td></tr></table></figure><p>因此，之后绘制的高斯函数将反映拟合后的新形状。现在我们在一个框架上绘制数据和拟合函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooPlot* xframe = x.<span class="hljs-built_in">frame</span>() ;<br>data.<span class="hljs-built_in">plotOn</span>(xframe) ;<br>model.<span class="hljs-built_in">plotOn</span>(xframe) ;<br>xframe-&gt;<span class="hljs-built_in">Draw</span>()<br></code></pre></td></tr></table></figure><p>请注意，PDF 的归一化（本质上归一化为一）会自动调整为图中事件的数量。RooFit 的一个强大功能和其创建的主要原因之一是拟合调用对binned data和unbinned data都有效。在后一种情况下，会执行unbinned的最大似然拟合。unbinned的 -log(L) 拟合在统计上比binned拟合更有力（即，您将获得更小的均值误差），并且避免了由选择分组定义引入的任意性。这些优势在拟合小数据集和多维数据集时尤为明显。所以使用fitTo()的时候，无论数据是binned还是unbinned都能很好的拟合出来。</p><p>拟合接口高度可定制。例如，如果您想在拟合中固定一个参数，只需将其指定为 RooRealVar 参数对象的一个属性，那么这个代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mean.<span class="hljs-built_in">setConstant</span>(kTRUE) ;<br>gauss.<span class="hljs-built_in">fitTo</span>(data) ;<br></code></pre></td></tr></table></figure><p>将参数 <code>mean</code> 固定为当前值重复拟合。同样，您可以选择将浮动参数限定在允许值范围内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sigma.<span class="hljs-built_in">setRange</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">3</span>) ;<br>gauss.<span class="hljs-built_in">fitTo</span>(data) ;<br></code></pre></td></tr></table></figure><p>所有这些拟合配置信息都会自动传递给 MINUIT。可以通过传递给 <code>fitTo()</code> 命令的可选命名参数来控制 MINUIT 的高级方面。这个示例启用 MINOS 方法来计算不对称误差，并将 MINUIT 的详细级别设置为最低值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">gauss.<span class="hljs-built_in">fitTo</span>(data, RooFit::<span class="hljs-built_in">Minos</span>(<span class="hljs-literal">true</span>), RooFit::<span class="hljs-built_in">PrintLevel</span>(<span class="hljs-number">-1</span>)) ;<br></code></pre></td></tr></table></figure><h4 id="2-4-1-范围拟合"><a href="#2-4-1-范围拟合" class="headerlink" title="2.4.1 范围拟合"></a>2.4.1 范围拟合</h4><p>通过同样的接口可以影响似然函数的构建方式。要将似然（以及拟合）限制在指定范围内的事件子集上，可以这样做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">gauss.<span class="hljs-built_in">fitTo</span>(data, <span class="hljs-built_in">Range</span>(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>)) ;<br></code></pre></td></tr></table></figure><p>随后对该拟合的绘图默认只会显示拟合范围内的曲线。</p><p>关于拟合中似然函数的构建、进阶使用选项以及 $\chi^2$ 拟合的构建细节将在第12章中详细介绍。所有可用的 <code>fitTo()</code> 命令参数的参考指南见附录E以及方法 <code>RooAbsPdf::fitTo()</code> 的<a href="https://root.cern.ch/doc/v632/classRooAbsPdf.html#ab0721374836c343a710f5ff92a326ff5">在线代码文档</a>。</p><h3 id="2-5-从模型生成数据"><a href="#2-5-从模型生成数据" class="headerlink" title="2.5 从模型生成数据"></a>2.5 从模型生成数据</h3><p>所有 RooFit 的概率密度函数 (p.d.f.) 都有一个通用接口，用于从其分布中生成事件。各种从分布中采样事件的技术已实现并在附录A中描述。RooAbsPdf 的内部逻辑会自动为每个使用案例选择最有效的技术。</p><p>最简单的形式中，可以从 p.d.f. 生成一个 RooDataSet，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooDataSet* data = gauss.<span class="hljs-built_in">generate</span>(x, <span class="hljs-number">10000</span>) ;<br></code></pre></td></tr></table></figure><p>这个示例创建了一个包含 10000 个事件的 RooDataSet，这些事件的可观测量 x 是从 p.d.f. gauss 中采样的。</p><h3 id="2-6-参数和可观测量"><a href="#2-6-参数和可观测量" class="headerlink" title="2.6 参数和可观测量"></a>2.6 参数和可观测量</h3><p>在本章的简单示例中，我们一直使用高斯概率密度函数（p.d.f.），并且明确假设变量 $x$ 是可观测量，而变量mean和sigma是我们的参数。这一区分非常重要，因为它直接关系到对象的函数表达式：概率密度函数相对于其可观测量是单位归一化的，但相对于其参数则不是。</p><p>然而，RooFit 的 p.d.f 类本身在参数和可观测量之间没有固有的静态区分概念。这乍看之下可能令人困惑，但为我们在构建复合对象时提供了必要的灵活性。参数和可观测量之间的区分总是有的，但它是从每个使用上下文中动态产生的。以下示例展示了如何将高斯函数用作可观测量均值的 p.d.f.：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooDataSet* data = gauss.<span class="hljs-built_in">generate</span>(mean,<span class="hljs-number">1000</span>);<br>RooPlot* mframe = mean.<span class="hljs-built_in">frame</span>();<br>data-&gt;<span class="hljs-built_in">plotOn</span>(mframe);<br>gauss.<span class="hljs-built_in">plotOn</span>(mframe);<br></code></pre></td></tr></table></figure><p>鉴于高斯函数的数学表达式在 $x$ 和 $m$ 的互换下是对称的，因此不出所料，这在以 $x$ 和 $\sigma$ 为参数时，得到的是一个以 $m$ 为可观测量的高斯分布。沿着同样的思路，也可以将高斯函数用作 $\sigma$ 的 p.d.f.，以 $x$ 和均值为参数。在许多情况下，不需要明确说明哪些变量是可观测量，因为其定义是从使用上下文中隐含地得出的。具体来说，只要一个使用上下文同时涉及 p.d.f. 和数据集，可观测量的隐含和自动定义是那些同时出现在数据集和 p.d.f. 定义中的变量。这种自动定义在拟合中很有效，因为拟合涉及一个显式的数据集，但也适用于绘图：RooPlot 框架变量始终被认为是可观测量。在其他所有涉及区分的上下文中，必须手动提供哪些变量被视为可观测量的定义。这就是为什么调用 <code>generate()</code> 时必须在每次调用中指定你认为的可观测量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooDataSet* data = gauss.<span class="hljs-built_in">generate</span>(x,<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></figure><p>然而，在高斯函数的所有三种可能的用例中，它相对于（隐含声明的）可观测量都是一个适当归一化的概率密度函数。这突显了 RooFit “动态可观测量”概念的重要后果：RooAbsPdf 对象没有唯一的返回值，它取决于可观测量的局部定义。通过在 <code>RooAbsPdf::getVal()</code> 中的一个显式的事后归一化步骤实现了这种功能，这个步骤对于每种可观测量的定义是不同的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Double_t gauss_raw = gauss.<span class="hljs-built_in">getVal</span>(); <span class="hljs-comment">// 未归一化的原始值</span><br>Double_t gauss_pdfX = gauss.<span class="hljs-built_in">getVal</span>(x); <span class="hljs-comment">// 用作 x 的 p.d.f 时的值</span><br>Double_t gauss_pdfM = gauss.<span class="hljs-built_in">getVal</span>(mean); <span class="hljs-comment">// 用作 mean 的 p.d.f 时的值</span><br>Double_t gauss_pdfS = gauss.<span class="hljs-built_in">getVal</span>(sigma); <span class="hljs-comment">// 用作 sigma 的 p.d.f 时的值</span><br></code></pre></td></tr></table></figure><h3 id="2-7-计算模型上的积分"><a href="#2-7-计算模型上的积分" class="headerlink" title="2.7 计算模型上的积分"></a>2.7 计算模型上的积分</h3><p>在 RooFit 中，概率密度函数（p.d.f.）和函数的积分被表示为独立的对象。因此，与其将积分定义为一个动作，不如说积分是通过一个继承自 RooAbsReal 的对象来定义的，其值是通过积分操作计算得到的。这样的对象可以通过 <code>createIntegral()</code> 方法或 RooAbsReal 来构造。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooAbsReal* intGaussX = gauss.<span class="hljs-built_in">createIntegral</span>(x);<br></code></pre></td></tr></table></figure><p>任何 RooAbsReal 函数或 RooAbsPdf 都可以通过这种方式进行积分。注意，对于 p.d.f.s，上述配置会对 gauss 的原始（未归一化）值进行积分。实际上，gauss 的归一化返回值 <code>gauss.getVal(x)</code> 恰好是 <code>gauss.getVal() / intGaussX-&gt;getVal()</code>。</p><p>大多数积分由 RooRealIntegral 类的对象表示。构造此类时，会确定执行积分请求的最有效方法。如果被积分函数支持对所请求的可观测量进行解析积分，则会使用解析实现【5】；否则，将选择数值技术。实际的积分并不是在构造时进行的，而是在调用 <code>RooRealIntegral::getVal()</code> 时按需进行。一旦计算出来，积分值会被缓存，并在积分参数的值发生变化或者（一个或多个）积分可观测量的归一化范围发生变化时失效。</p><p>你可以通过打印积分对象来检查选择的积分策略：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">intGaussX-&gt;<span class="hljs-built_in">Print</span>(<span class="hljs-string">&quot;v&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--- RooRealIntegral ---</span><br>Integrates g[ x<span class="hljs-operator">=</span>x mean<span class="hljs-operator">=</span>m sigma<span class="hljs-operator">=</span>s ]<br>operating mode <span class="hljs-keyword">is</span> Analytic<br>Summed discrete args <span class="hljs-keyword">are</span> ()<br>Numerically integrated args <span class="hljs-keyword">are</span> ()<br>Analytically integrated args <span class="hljs-keyword">using</span> mode <span class="hljs-number">1</span> <span class="hljs-keyword">are</span> (x)<br>Arguments included <span class="hljs-keyword">in</span> Jacobian <span class="hljs-keyword">are</span> ()<br>Factorized arguments <span class="hljs-keyword">are</span> ()<br><span class="hljs-keyword">Function</span> normalization <span class="hljs-keyword">set</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>这一输出说明了以下几点：</p><ul><li>被积分的函数 $ g $ 和涉及的参数 $ $x$, $mean$, $sigma$ $。</li><li>操作模式为解析积分（Analytic）。</li><li>无需求和的离散参数。</li><li>无需数值积分的参数。</li><li>$ x $ 参数使用了模式 1 的解析积分。</li><li>雅可比矩阵中包含的参数为空。</li><li>无需因式分解的参数。</li><li>无设置的函数归一化。</li></ul><h4 id="2-7-1-归一化概率密度函数-p-d-f"><a href="#2-7-1-归一化概率密度函数-p-d-f" class="headerlink" title="2.7.1 归一化概率密度函数(p.d.f.)"></a>2.7.1 归一化概率密度函数(p.d.f.)</h4><p>也可以构造归一化p.d.f.的积分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooAbsReal* intGaussX = gauss.<span class="hljs-built_in">createIntegral</span>(x,<span class="hljs-built_in">NormSet</span>(x)) ;<br></code></pre></td></tr></table></figure><p>这个例子并没有太大实际用途，因为它总是返回1，但使用相同的接口，也可以在观测变量的预定义子区间上进行积分，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x.<span class="hljs-built_in">setRange</span>(<span class="hljs-string">&quot;signal&quot;</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">2</span>) ;<br>RooAbsReal* intGaussX = gauss.<span class="hljs-built_in">createIntegral</span>(x,<span class="hljs-built_in">NormSet</span>(x),<span class="hljs-built_in">Range</span>(<span class="hljs-string">&quot;signal&quot;</span>)) ;<br></code></pre></td></tr></table></figure><p>以提取模型在“信号”区间内的部分。诸如“信号”之类的命名区间的概念将在第3章和第7章详细阐述。归一化p.d.f.积分的返回值自然位于[0,1]范围内。</p><h4 id="2-7-2-累积分布函数"><a href="#2-7-2-累积分布函数" class="headerlink" title="2.7.2 累积分布函数"></a>2.7.2 累积分布函数</h4><p>积分p.d.f.的一种特殊形式是累积分布函数（c.d.f.），其定义如下，并且可以通过专门的方法createCdf()从任何p.d.f.构造：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooAbsReal* cdf = pdf-&gt;<span class="hljs-built_in">createCdf</span>(x) ;<br></code></pre></td></tr></table></figure><p>对于这种形式的积分，createCdf()相对于createIntegral()的优势在于前者能够更有效地处理需要数值积分的p.d.f.：createIntegral()在一个或多个参数变化后会从头开始重新计算整个数值积分，而createCdf()则会缓存数值积分采样阶段的结果，只重新计算求和部分。有关积分和累积分布函数的更多细节见附录C。</p><h4 id="Summary-3"><a href="#Summary-3" class="headerlink" title="Summary 3"></a>Summary 3</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooGaussian <span class="hljs-title function_">gauss</span><span class="hljs-params">(<span class="hljs-string">&quot;gauss&quot;</span>,<span class="hljs-string">&quot;gauss&quot;</span>,x,mean,sigma)</span>;<br>RooDataSet *data= gauss.generate(x,<span class="hljs-number">1000</span>);<br><br><span class="hljs-comment">//mean.setConstant(kTRUE); //设置mean为固定值进行拟合</span><br><span class="hljs-comment">//sigma.setRange(0.1,3); //设置sigma范围进行拟合</span><br><br>gauss.fitTo(*data);<br><span class="hljs-comment">// gauss.fitTo(*data, RooFit::Minos(true), RooFit::PrintLevel(-1), Range(-3,2));</span><br><span class="hljs-comment">//print level从-1到3输出的信息由详细到简略递减 </span><br><span class="hljs-comment">//Range设置x的拟合范围</span><br><span class="hljs-comment">//参考https://root.cern.ch/doc/master/classRooAbsPdf.html#ab0721374836c343a710f5ff92a326ff5</span><br><br>mean.Print();<br>sigma.Print();<br>RooPlot* xframe =x.frame();<br>data-&gt;plotOn(xframe);<br>gauss.plotOn(xframe);<br><span class="hljs-comment">// RooAbsReal* cdf=gauss.createCdf(x); //对你个pdf在x上求出累积分布函数cdf</span><br><span class="hljs-comment">// cdf-&gt;plotOn(xframe);</span><br>xframe-&gt;Draw();<br><span class="hljs-comment">// sigma = 2 ; </span><br><span class="hljs-comment">// gauss.plotOn(xframe,LineColor(kRed)) ; </span><br><span class="hljs-comment">// xframe-&gt;Draw(); </span><br>x.setRange(<span class="hljs-string">&quot;signal&quot;</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">2</span>);<br>RooAbsReal* intg=gauss.createIntegral(x,NormSet(x));<br>RooAbsReal* intgsig=gauss.createIntegral(x,NormSet(x),Range(<span class="hljs-string">&quot;signal&quot;</span>));<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;intg = &quot;</span>&lt;&lt;intg-&gt;getVal()&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//对x全范围的积分，经过归一化之后为1:NormSet(x)</span><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;intgsig = &quot;</span>&lt;&lt;intgsig-&gt;getVal()&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//设置一个积分范围Range()</span><br></code></pre></td></tr></table></figure><p><img src="/postfigure/roofit_manual/image-20241231130407561.png" style="zoom:50%;" /><img src="/postfigure/roofit_manual/image-20241231130456956.png" style="zoom:50%;" /></p><center>Figure 4 - 拟合曲线与累积积分曲线</center><h4 id="Note-3"><a href="#Note-3" class="headerlink" title="Note 3"></a>Note 3</h4><ul><li><p>默认的随机生成的种子号是<code>0</code>，一般会根据时间设置种子号，这样每次生成都是不一样的。你可以使用<code>RooRandom::randomGenerator()-&gt;SetSeed(seed)</code>来自定义种子号，还有另外一种方式<code>gRandom-&gt;SetSeed(seed)</code>，前者是对RooFit中的随机数生成器进行设置，RooFit中的一些需要随机数的函数都会依赖这个值，后者是面向ROOT的全局随机数生成器，当除RooFit之外的其他库中也需要随机数生成的时候，会依赖这个seed。简单来说，后者可以包含前者，你可以使用<code>gRandom-&gt;GetSeed()</code>去查看当前的seed。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">TDatime* starttime=new TDatime();<br>Int_t today=starttime-&gt;GetDate();<br>Int_t clock=starttime-&gt;GetTime();<br>Int_t seed=today+clock;<br>RooRandom::randomGenerator()-&gt;SetSeed(seed);<br></code></pre></td></tr></table></figure></li><li><p>你可以用<code>RooFitResult</code>去获取拟合的参数，这样在一些复杂的拟合过程，你可以设置一些条件，让拟合过程不断循环，直到拟合成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">RooFitResult* fitRes=mytotal.fitTo(*data, Save());<span class="hljs-comment">//保存拟合结果，并返回一个RooFitResult对象</span><br>Data_edm = fitRes-&gt;edm();<br>minNll = fitRes-&gt;minNll(); <span class="hljs-comment">//Return minimized -log(L) value. </span><br>Data_status = fitRes-&gt;status(); <span class="hljs-comment">//MINUIT status code</span><br>Data_covQual = fitRes-&gt;covQual();<br><span class="hljs-comment">//你还可以将最终拟合结果得到的参数输出到一个文件中</span><br><span class="hljs-built_in">std</span>::ofstream <span class="hljs-title function_">outFile</span><span class="hljs-params">(<span class="hljs-string">&quot;fitresult.txt&quot;</span>)</span>; <br>fitRes-&gt;printMultiline(outFile, <span class="hljs-number">0</span>, kTRUE, <span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">if</span>(Data_edm&lt;<span class="hljs-number">0.001</span> &amp;&amp; Data_status==<span class="hljs-number">0</span> &amp;&amp; Data_covQual==<span class="hljs-number">3</span>) &#123;...&#125;<span class="hljs-comment">//设置拟合结果需要满足的条件</span><br></code></pre></td></tr></table></figure><ol><li><p><code>edm</code> (Estimated Distance to Minimum):</p><ul><li><code>edm</code> 是一个衡量拟合收敛性的指标。它表示当前拟合参数估计值与最小值之间的距离。较小的 <code>edm</code> 值表示拟合更接近最小值。通常，<code>edm</code> 值小于某个阈值（例如 1e-3 或 1e-4）表示拟合已经收敛。</li></ul></li><li><p><code>minNll</code> (Minimized Negative Log-Likelihood):</p><ul><li><code>minNll</code> 是最小化的负对数似然值。它表示在拟合过程中找到的最佳参数估计值对应的负对数似然值。较小的 <code>minNll</code> 值表示拟合模型更好地描述了数据。通常用来计算置信度。</li></ul></li><li><p><code>status</code> (MINUIT Status Code):</p><p>是 MINUIT 拟合的状态代码。它表示拟合过程的状态。常见的状态代码包括：</p><ul><li>0：拟合成功。</li><li>1：拟合未收敛。</li><li>2：达到最大函数调用次数。</li><li>3：达到最大参数步长。</li><li>4：Hesse 矩阵计算失败。</li><li>5：Hesse 矩阵计算成功，但拟合未收敛。</li></ul></li><li><p><code>covQual</code> (Covariance Matrix Quality):</p><p>是协方差矩阵的质量指标。它表示拟合参数的不确定性估计的质量。常见的质量代码包括：</p><ul><li>-1：协方差矩阵未计算。</li><li>0：协方差矩阵计算失败。</li><li>1：协方差矩阵计算成功，但质量较差。</li><li>2：协方差矩阵计算成功，质量一般。</li><li>3：协方差矩阵计算成功，质量较好。</li></ul></li></ol></li></ul><h2 id="3-信号和背景-–-复合模型介绍"><a href="#3-信号和背景-–-复合模型介绍" class="headerlink" title="3 信号和背景 – 复合模型介绍"></a>3 信号和背景 – 复合模型介绍</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>数据模型通常用于描述包含多种事件假设的样本，例如信号和（一个或多个类型的）背景。为了描述这种性质的样本，可以构建一个复合模型。对于事件假设‘信号’和‘背景’，复合函数M(x)可以通过描述信号的函数S(x)和描述背景的函数B(x)构建，如下所示：</p><p>$ M(x) &#x3D; fS(x) + (1 - f)B(x) $</p><p>在这个公式中，$ f $ 是样本中信号事件的比例。多个假设的通用表达式为：</p><p>$ M(x) &#x3D; \sum_{i&#x3D;1}^{N-1} f_i F_i(x) + \left(1 - \sum_{i&#x3D;1}^{N-1} f_i \right) F_N(x) $</p><p>这种方式添加p.d.f.的一个特性是，M(x)不需要特意地归一化为1：如果S(x)和B(x)都是归一化为1的，那么通过这种构造，M(x)也是归一化的。RooFit提供了一个特殊的‘加法运算符’p.d.f.在<code>RooAddPdf</code>类中，以简化构建和使用这种复合p.d.f.。</p><h4 id="3-1-1-扩展似然方法-extended-likelihood"><a href="#3-1-1-扩展似然方法-extended-likelihood" class="headerlink" title="3.1.1 扩展似然方法(extended likelihood)"></a>3.1.1 扩展似然方法(extended likelihood)</h4><p>测量结果通常以事件数而非事件比例的形式引用，因此，直接用信号和背景事件的数量而不是信号事件的比例（和总事件数）来表示数据模型是很有用的。具体表达如下：</p><p>$M_E(x) &#x3D; N_S S(x) + N_B B(x) $</p><p>在这个表达式中 $M_E(x)$ 不是归一化为1，而是归一化为  $N_S + N_B &#x3D; N$ ，即数据样本中的事件总数。因此，这不是一个严格的概率密度函数，而是两个表达式的简写：分布的形状和期望事件数。</p><p>$M(x) &#x3D; \left(\frac{N_S}{N_S + N_B}\right) S(x) + \left(\frac{N_B}{N_S + N_B}\right) B(x) $</p><p>$ N_\text{Expected } &#x3D; N_S + N_B $</p><p>在扩展似然方法中，可以联合约束这些表达式：</p><p>$-\log L(p) &#x3D; -\sum_{\text{data}} \log M(x_i) -  \log, \text{Poisson}( N_{\text{expected}}, N_{\text{expected}}) $</p><p>在RooFit中，普通的加和( $ N_{\text{coef}} &#x3D; N_{\text{pdf}} - 1 $ ) 和扩展似然加和 ( $ N_{\text{coef}} &#x3D; N_{\text{pdf}} $ ) 都由运算符类RooAddPdf表示，后者会自动构建扩展似然项。</p><h3 id="3-2-构建具有系数的复合模型"><a href="#3-2-构建具有系数的复合模型" class="headerlink" title="3.2 构建具有系数的复合模型"></a>3.2 构建具有系数的复合模型</h3><p>我们首先从简单（非扩展）复合模型的描述开始。以下是使用分数系数通过RooAddPdf构建复合概率密度函数（PDF）的一个简单示例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>, <span class="hljs-string">&quot;sigma&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10.</span>)</span>;<br>RooGaussian <span class="hljs-title function_">sig</span><span class="hljs-params">(<span class="hljs-string">&quot;sig&quot;</span>, <span class="hljs-string">&quot;signal p.d.f.&quot;</span>, x, mean, sigma)</span>;<br><br>RooRealVar <span class="hljs-title function_">c0</span><span class="hljs-params">(<span class="hljs-string">&quot;c0&quot;</span>, <span class="hljs-string">&quot;coefficient #0&quot;</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">-1.</span>, <span class="hljs-number">1.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">c1</span><span class="hljs-params">(<span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;coefficient #1&quot;</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">-1.</span>, <span class="hljs-number">1.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">c2</span><span class="hljs-params">(<span class="hljs-string">&quot;c2&quot;</span>, <span class="hljs-string">&quot;coefficient #2&quot;</span>, <span class="hljs-number">-0.1</span>, <span class="hljs-number">-1.</span>, <span class="hljs-number">1.</span>)</span>;<br>RooChebychev <span class="hljs-title function_">bkg</span><span class="hljs-params">(<span class="hljs-string">&quot;bkg&quot;</span>, <span class="hljs-string">&quot;background p.d.f.&quot;</span>, x, RooArgList(c0, c1, c2))</span>;<br><br>RooRealVar <span class="hljs-title function_">fsig</span><span class="hljs-params">(“fsig”,”signal fraction”,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">1.</span>)</span>;<br><br><span class="hljs-comment">// model(x) = fsig*sig(x) + (1-fsig)*bkg(x)</span><br>RooAddPdf <span class="hljs-title function_">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>, <span class="hljs-string">&quot;model&quot;</span>, RooArgList(sig, bkg), fsig)</span>;<br></code></pre></td></tr></table></figure><p>在这个示例中，我们首先构建一个高斯概率密度函数(sig)和一个平坦的背景概率密度函数(bkg)，然后使用信号分数(fsig)将它们加在一起构成模型。请注意，使用容器类RooArgList来作为函数的单一参数传递对象列表。RooFit有两个容器类：RooArgList和RooArgSet。每个容器类可以包含任意数量的RooFit值对象，即任何继承自RooAbsArg的对象，如RooRealVar、RooAbsPdf等。区别在于列表list是有序的，可以通过位置引用（第2个，第3个等）访问元素，并且可以包含多个同名对象，而集合set是无序的，但要求每个成员有唯一的名称。</p><p>RooAddPdf实例可以将任意数量的成分相加，要用两个系数添加三个概率密度函数，可以写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// model2(x) = fsig*sig(x) + fbkg1*bkg1(x) + (1-fsig-fbkg)*bkg2(x) </span><br>RooAddPdf <span class="hljs-title function_">model2</span><span class="hljs-params">(<span class="hljs-string">&quot;model2&quot;</span>,<span class="hljs-string">&quot;model2&quot;</span>,RooArgList(sig,bkg1,bkg2), RooArgList(fsig,fbkg1))</span> ;<br></code></pre></td></tr></table></figure><p>要构建一个非扩展的概率密度函数，其中系数为小于1的分数并且他们的和必然为1，那么系数的数量应总是比概率密度函数的数量少一个。</p><h4 id="3-2-1-使用RooAddPdf递归"><a href="#3-2-1-使用RooAddPdf递归" class="headerlink" title="3.2.1 使用RooAddPdf递归"></a>3.2.1 使用RooAddPdf递归</h4><p>请注意，RooAddPdf的输入p.d.f.不需要是基本的p.d.f.，它们本身可以是复合p.d.f.。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 构造第三个pdf bkg_peak</span><br><span class="hljs-function">RooRealVar <span class="hljs-title">mean_bkg</span><span class="hljs-params">(<span class="hljs-string">&quot;mean_bkg&quot;</span>,<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">RooRealVar <span class="hljs-title">sigma_bkg</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma_bkg&quot;</span>,<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>)</span></span>;<br><span class="hljs-function">RooGaussian <span class="hljs-title">bkg_peak</span><span class="hljs-params">(<span class="hljs-string">&quot;bkg_peak&quot;</span>,<span class="hljs-string">&quot;peaking bkg p.d.f.&quot;</span>,x,mean_bkg,sigma_bkg)</span></span>;<br><br><span class="hljs-comment">// 首先将sig和peak以fpeak的比例相加</span><br><span class="hljs-function">RooRealVar <span class="hljs-title">fpeak</span><span class="hljs-params">(<span class="hljs-string">&quot;fpeak&quot;</span>,<span class="hljs-string">&quot;peaking background fraction&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">1.</span>)</span></span>;<br><span class="hljs-function">RooAddPdf <span class="hljs-title">sigpeak</span><span class="hljs-params">(<span class="hljs-string">&quot;sigpeak&quot;</span>,<span class="hljs-string">&quot;sig+peak&quot;</span>,RooArgList(bkg_peak,sig),fpeak)</span></span>;<br><br><span class="hljs-comment">// 然后将(sig+peak)以fbkg的比例与bkg相加</span><br><span class="hljs-function">RooRealVar <span class="hljs-title">fbkg</span><span class="hljs-params">(<span class="hljs-string">&quot;fbkg&quot;</span>,<span class="hljs-string">&quot;background fraction&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">1.</span>)</span></span>;<br><span class="hljs-function">RooAddPdf <span class="hljs-title">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>,<span class="hljs-string">&quot;bkg+(sig+peak)&quot;</span>,RooArgList(bkg,sigpeak),fbkg)</span></span>;<br></code></pre></td></tr></table></figure><p>最终的p.d.f.模型表示如下表达式：<br>$M(x) &#x3D; f_{\text{bkg}} B(x) + (1 - f_{\text{bkg}}) \left[ f_{\text{peak}} P(x) + (1 - f_{\text{peak}}) S(x) \right] $</p><p>也可以通过单个RooAddPdf的递归模式构建这样的递归加法公式。在这种构造模式下，系数的解释如下：<br>$M(x) &#x3D; f_1 P_1 + (1 - f_1) \left[ f_2 P_2 + (1 - f_2) \left[ f_3 P_3 + (1 - f_3) P_4 \right] \right] $</p><p>例如，要构建与上面模型对象功能等价的模型，可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">RooAddPdf <span class="hljs-title">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>,<span class="hljs-string">&quot;recursive addition model&quot;</span>, RooArgList(bkg, bkg_peak, sig), RooArgList(fbkg, fpeak, fsig), kTRUE)</span></span>;<br></code></pre></td></tr></table></figure><p>这样，最终模型的形式与例子5中的递归加法表达式等效。<br>$M(x)&#x3D;(f_1F_1+(1-f_1)(f_2F_2+(1-f_2)(f_3F_3+(1-f_3)(f_4F_4+(1-f_4)F_5))))$</p><h3 id="3-3-绘制复合模型"><a href="#3-3-绘制复合模型" class="headerlink" title="3.3 绘制复合模型"></a>3.3 绘制复合模型</h3><p>复合p.d.f.的模块化结构允许你处理各个单独的组件。例如，可以在模型上绘制复合模型的各个组件，以可视化其结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooPlot* frame = x.<span class="hljs-built_in">frame</span>();<br>model.<span class="hljs-built_in">plotOn</span>(frame);<br>model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(bkg), <span class="hljs-built_in">LineStyle</span>(kDashed));<br>frame-&gt;<span class="hljs-built_in">Draw</span>();<br></code></pre></td></tr></table></figure><p>组件图以虚线样式绘制。有关绘图样式选项的完整概述，请参见[ROOT: TAttLine](<a href="https://root.cern.ch/doc/master/classTAttLine.html#:~:text=Learn">https://root.cern.ch/doc/master/classTAttLine.html#:~:text=Learn</a> how to use the TAttLine class to set and)。</p><p>你可以通过对象引用来识别组件，或者通过名称来识别组件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(<span class="hljs-string">&quot;bkg&quot;</span>),<span class="hljs-built_in">LineStyle</span>(kDashed)) ;<br></code></pre></td></tr></table></figure><p>如果你的绘图代码无法访问组件对象，例如，如果你的模型是在一个只返回顶级RooAddPdf对象的独立函数中构建的，那么后一种方法非常方便。</p><p>如果你想绘制多个组件的和，也可以通过两种方式实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(<span class="hljs-built_in">RooArgSet</span>(bkg1, bkg2)), <span class="hljs-built_in">LineStyle</span>(kDashed));<br>model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(<span class="hljs-string">&quot;bkg1,bkg2&quot;</span>), <span class="hljs-built_in">LineStyle</span>(kDashed));<br></code></pre></td></tr></table></figure><p>请注意，在后一种形式中，允许使用通配符，因此如果选择一个合适的组件命名方案，例如，可以这样做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">RooAddPdf <span class="hljs-title">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>, <span class="hljs-string">&quot;bkg+(sig+peak)&quot;</span>, RooArgList(bkg, peak, bkg), RooArgList(fbkg, fpeak), kTRUE)</span></span>;<br>model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(<span class="hljs-string">&quot;bkg&quot;</span>), <span class="hljs-built_in">LineStyle</span>(kDashed));<br>model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Components</span>(<span class="hljs-string">&quot;bkg*&quot;</span>), <span class="hljs-built_in">LineStyle</span>(kDashed));<br></code></pre></td></tr></table></figure><p>如果需要，可以在逗号分隔的列表中指定多个通配符表达式。</p><h3 id="3-4-使用复合模型"><a href="#3-4-使用复合模型" class="headerlink" title="3.4 使用复合模型"></a>3.4 使用复合模型</h3><h4 id="3-4-1-拟合复合模型"><a href="#3-4-1-拟合复合模型" class="headerlink" title="3.4.1 拟合复合模型"></a>3.4.1 拟合复合模型</h4><p>拟合带有分数系数的复合模型与拟合任何其他模型没有区别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">model.<span class="hljs-built_in">fitTo</span>(data);<br></code></pre></td></tr></table></figure><p>模型的参数包括组件p.d.f.的参数以及由加法运算符类引入的分数参数。</p><h4 id="3-4-2-使用多个分数拟合的常见陷阱"><a href="#3-4-2-使用多个分数拟合的常见陷阱" class="headerlink" title="3.4.2 使用多个分数拟合的常见陷阱"></a>3.4.2 使用多个分数拟合的常见陷阱</h4><p>在涉及直（非递归）加法多个组件的模型中定义分数参数的允许范围时，需要注意一些事项。如果两个组件通过一个分数相加，那么该分数的自然范围是$0,1$。但是，如果添加了多个组件，就会有多个分数。尽管将每个分数的允许范围保持在$0,1$是合法的，但这可能会导致系数之和超过1的配置，例如当$f_1 &#x3D; f_2 &#x3D; 0.7$时。如果发生这种情况，最后的系数（自动计算为$1 - \sum_{i&#x3D;1}^{N-1} f_i$）将变为负数。</p><p>如果在拟合过程中出现这种配置，RooFit将在每次发生时打印警告消息，但只要在似然评估的每个点上RooAddPdf的返回值仍为正，就不会采取任何措施。如果你想避免这种配置，有几种选择。</p><p>一种方法是使用RooRealVar::setRange()收紧所有分数的允许范围，使它们相加时永远不会超过1。这种方法需要一些关于你拟合的分布的知识，以避免禁止最佳拟合配置。</p><p>另一种方法是使用递归加法，在这种方法中，分数值范围$0,1$的每种排列都会生成有效的正定复合pdf。这种方法改变了系数的解释，但对要建模的分布形状不做任何假设。</p><p>第三种方法是使用扩展的似然拟合，其中所有系数都明确指定，没有隐式计算的剩余分数变为负数的可能性。</p><h4 id="3-4-3-使用复合模型生成数据"><a href="#3-4-3-使用复合模型生成数据" class="headerlink" title="3.4.3 使用复合模型生成数据"></a>3.4.3 使用复合模型生成数据</h4><p>使用复合模型生成事件的接口与使用基本模型生成事件的接口相同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 生成10000个事件</span><br>RooDataSet* x = model.<span class="hljs-built_in">generate</span>(x,<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></figure><p>在内部，RooFit将利用p.d.f.的复合结构，并将事件生成委托给组件p.d.f.的方法，这通常更有效。</p><h3 id="3-5-构建扩展复合模型-extended-composite-models"><a href="#3-5-构建扩展复合模型-extended-composite-models" class="headerlink" title="3.5 构建扩展复合模型(extended composite models)"></a>3.5 构建扩展复合模型(extended composite models)</h3><p>为了构建可以与扩展似然拟合一起使用的复合p.d.f.，需要为每个组件指定相应的系数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">RooRealVar <span class="hljs-title">nsig</span><span class="hljs-params">(<span class="hljs-string">&quot;nsig&quot;</span>,<span class="hljs-string">&quot;nsignal&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10000.</span>)</span> </span>; <br><span class="hljs-function">RooRealVar <span class="hljs-title">nbkg</span><span class="hljs-params">(<span class="hljs-string">&quot;nbkg&quot;</span>,<span class="hljs-string">&quot;nbackground&quot;</span>,<span class="hljs-number">400</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10000.</span>)</span> </span>;<br><span class="hljs-function">RooAddPdf <span class="hljs-title">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>, <span class="hljs-string">&quot;model&quot;</span>, RooArgList(sig, bkg), RooArgList(nsig, nbkg))</span></span>;<br></code></pre></td></tr></table></figure><p>在这个例子中，系数参数的允许范围已经调整为可以容纳事件计数而不是分数。从实际角度来看，简单复合模型(plain composite models)和扩展复合模型(extended composite models)之间的区别在于，扩展复合模型中的 RooAbsPdf 对象模型可以通过其成员函数 <code>expectedEvents()</code> 预测预期的数据事件数（即 nsig + nbkg），而简单复合模型不能。扩展复合模型形式通过将每个系数除以所有系数的总和来得到组件分数。$M(x) &#x3D; \left(\frac{N_S}{N_S + N_B}\right) S(x) + \left(\frac{N_B}{N_S + N_B}\right) B(x) $</p><p>还可以构建两个或多个已经是扩展 p.d.f. 的组件 p.d.f. 的和，在这种情况下，无需提供系数来构建扩展和 p.d.f.。这些输入可以是之前构建的 RooAddPdfs（使用扩展模式选项）或通过 RooExtendPdf 实用程序 p.d.f. 扩展的普通 p.d.f.。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">RooRealVar <span class="hljs-title">nsig</span><span class="hljs-params">(<span class="hljs-string">&quot;nsig&quot;</span>, <span class="hljs-string">&quot;nsignal&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10000.</span>)</span></span>;<br><span class="hljs-function">RooRealVar <span class="hljs-title">nbkg</span><span class="hljs-params">(<span class="hljs-string">&quot;nbkg&quot;</span>, <span class="hljs-string">&quot;nbackground&quot;</span>, <span class="hljs-number">400</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10000.</span>)</span></span>;<br><span class="hljs-function">RooExtendPdf <span class="hljs-title">esig</span><span class="hljs-params">(<span class="hljs-string">&quot;esig&quot;</span>, <span class="hljs-string">&quot;esig&quot;</span>, sig, nsig)</span></span>;<br><span class="hljs-function">RooExtendPdf <span class="hljs-title">ebkg</span><span class="hljs-params">(<span class="hljs-string">&quot;ebkg&quot;</span>, <span class="hljs-string">&quot;ebkg&quot;</span>, bkg, nbkg)</span></span>;<br><span class="hljs-function">RooAddPdf <span class="hljs-title">model</span><span class="hljs-params">(<span class="hljs-string">&quot;model&quot;</span>, <span class="hljs-string">&quot;model&quot;</span>, RooArgList(esig, ebkg))</span></span>;<br></code></pre></td></tr></table></figure><p><img src="/postfigure/roofit_manual/image-20250117131247015.png"></p><center>Figure 5 - 扩展复合模型</center><h4 id="3-5-1-范围内信号事件产量"><a href="#3-5-1-范围内信号事件产量" class="headerlink" title="3.5.1 范围内信号事件产量"></a>3.5.1 范围内信号事件产量</h4><p>假设你对Figure 5 中模型的范围$[-2,2]$内的信号事件产量感兴趣：</p><p>你可以通过将总信号产量乘以信号 p.d.f. 形状在范围$[-2,2]$内的分数来计算这一点，但仍然需要手动传递信号产量和形状分数积分的误差到最终结果。RooExtendPdf 类提供了在预期事件数的计算中立即应用转换的可能性，以便似然函数，从而拟合结果，直接以 $N_{sig}^{Window}$ 表示，并且所有误差都会自动正确传播。</p><p>这种修改的效果是 esig 返回的预期事件数变为：</p><p>$N_{\text{sig}}^{\text{expected}} &#x3D; N_{\text{sig}}^{\text{ window}} \int_{4}^{6} S(x) , dx $</p><p>这样，在最小化扩展最大似然后，nsigw 等于信号窗口中事件数的最佳估计值。通过这种方式，您可以在拟合时直接得到信号窗口内的事件数及其误差。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x.<span class="hljs-built_in">setRange</span>(<span class="hljs-string">&quot;window&quot;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>RooAbsReal* fracSigRange = sig.<span class="hljs-built_in">createIntegral</span>(x, x, <span class="hljs-string">&quot;window&quot;</span>);<br>Double_t nsigWindow = nsig.<span class="hljs-built_in">getVal</span>() * fracSigRange-&gt;<span class="hljs-built_in">getVal</span>();<br><span class="hljs-comment">//先计算窗口区的信号比例，再用总信号数*窗口区比例=窗口区的信号数，但不能传递误差</span><br><span class="hljs-function">RooRealVar <span class="hljs-title">nsigw</span><span class="hljs-params">(<span class="hljs-string">&quot;nsigw&quot;</span>, <span class="hljs-string">&quot;nsignal in window&quot;</span>, <span class="hljs-number">500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10000.</span>)</span></span>;<br><span class="hljs-function">RooExtendPdf <span class="hljs-title">esig</span><span class="hljs-params">(<span class="hljs-string">&quot;esig&quot;</span>, <span class="hljs-string">&quot;esig&quot;</span>, sig, nsigw, <span class="hljs-string">&quot;window&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="3-6-使用扩展复合模型生成事件"><a href="#3-6-使用扩展复合模型生成事件" class="headerlink" title="3.6 使用扩展复合模型生成事件"></a>3.6 使用扩展复合模型生成事件</h3><h4 id="3-6-1-从扩展模型生成事件"><a href="#3-6-1-从扩展模型生成事件" class="headerlink" title="3.6.1 从扩展模型生成事件"></a>3.6.1 从扩展模型生成事件</h4><p>一些额外的特性适用于为扩展似然形式构建的复合模型。由于这些模型预测了一定数量的事件，因此可以省略请求生成的事件数量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooDataSet* x = model.<span class="hljs-built_in">generate</span>(x);<br></code></pre></td></tr></table></figure><p>在这种情况下，将生成由概率密度函数（p.d.f.）预测的事件数量。您还可以选择通过 <code>Extended()</code> 参数引入泊松波动到生成的事件数量中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooDataSet* x = model.<span class="hljs-built_in">generate</span>(x, <span class="hljs-built_in">Extended</span>(kTRUE));<br></code></pre></td></tr></table></figure><p>如果您在研究中生成了许多样本并查看拉量分布，这是非常有用的。为了使事件计数参数的拉量分布正确，生成的事件总数应存在泊松波动。关于拟合研究和拉量分布的详细内容，请参见第14章。</p><h4 id="3-6-2-拟合"><a href="#3-6-2-拟合" class="headerlink" title="3.6.2 拟合"></a>3.6.2 拟合</h4><p>复合扩展概率密度函数（p.d.f.）只有在包含扩展似然项进行最小化时才能成功拟合，因为它们在参数化中有一个由该扩展项约束的额外自由度。如果一个概率密度函数能够计算扩展项（例如任何扩展的 <code>RooAddPdf</code> 对象），则扩展项会自动包含在似然计算中。您可以通过在 <code>fitTo()</code> 调用中添加 <code>Extended()</code> 参数手动覆盖此默认行为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">model.<span class="hljs-built_in">fitTo</span>(data, <span class="hljs-built_in">Extended</span>(kTRUE)); <span class="hljs-comment">// 可选</span><br></code></pre></td></tr></table></figure><h4 id="3-6-3-绘图"><a href="#3-6-3-绘图" class="headerlink" title="3.6.3 绘图"></a>3.6.3 绘图</h4><p>扩展似然模型的可视化默认程序与常规概率密度函数相同：用于归一化的事件计数是添加到绘图框架中的最后一个数据集的事件计数。您可以选择覆盖此行为并使用概率密度函数的预期事件计数进行归一化，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">model.<span class="hljs-built_in">plotOn</span>(frame, <span class="hljs-built_in">Normalization</span>(<span class="hljs-number">1.0</span>, RooAbsReal::RelativeExtended));<br></code></pre></td></tr></table></figure><h4 id="Summary-4"><a href="#Summary-4" class="headerlink" title="Summary 4"></a>Summary 4</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooGaussian <span class="hljs-title function_">gaus</span><span class="hljs-params">(<span class="hljs-string">&quot;gaus&quot;</span>,<span class="hljs-string">&quot;guas&quot;</span>,x,mean,sigma)</span>;<br>RooRealVar <span class="hljs-title function_">c0</span><span class="hljs-params">(<span class="hljs-string">&quot;c0&quot;</span>,<span class="hljs-string">&quot;c0&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">c1</span><span class="hljs-params">(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooChebychev <span class="hljs-title function_">chev</span><span class="hljs-params">(<span class="hljs-string">&quot;chev&quot;</span>,<span class="hljs-string">&quot;chev&quot;</span>,x,RooArgList(c0,c1))</span>;<br><br>RooRealVar <span class="hljs-title function_">c2</span><span class="hljs-params">(<span class="hljs-string">&quot;c2&quot;</span>,<span class="hljs-string">&quot;c2&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">c3</span><span class="hljs-params">(<span class="hljs-string">&quot;c3&quot;</span>,<span class="hljs-string">&quot;c3&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooChebychev <span class="hljs-title function_">chev2</span><span class="hljs-params">(<span class="hljs-string">&quot;chev2&quot;</span>,<span class="hljs-string">&quot;chev2&quot;</span>,x,RooArgList(c2,c3))</span>;<br><br>RooRealVar <span class="hljs-title function_">nsig</span><span class="hljs-params">(<span class="hljs-string">&quot;nsig&quot;</span>, <span class="hljs-string">&quot;signal fraction&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10000.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">nbkg</span><span class="hljs-params">(<span class="hljs-string">&quot;nbkg&quot;</span>, <span class="hljs-string">&quot;background fraction&quot;</span>, <span class="hljs-number">400</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10000.</span>)</span>;<br>RooExtendPdf <span class="hljs-title function_">egaus</span><span class="hljs-params">(<span class="hljs-string">&quot;egaus&quot;</span>, <span class="hljs-string">&quot;egaus&quot;</span>, gaus, nsig)</span>;<br>RooExtendPdf <span class="hljs-title function_">echev</span><span class="hljs-params">(<span class="hljs-string">&quot;echev&quot;</span>, <span class="hljs-string">&quot;echev&quot;</span>, chev, nbkg)</span>;<br><span class="hljs-comment">// modelE(x) = nsig/(nsig + nbkg) gaus(x) + nbkg/(nsig + nbkg) chev(x)</span><br>RooAddPdf <span class="hljs-title function_">modelE</span><span class="hljs-params">(<span class="hljs-string">&quot;modelE&quot;</span>, <span class="hljs-string">&quot;modelE&quot;</span>, RooArgList(egaus, echev))</span>;<br><br>RooRealVar <span class="hljs-title function_">fsig</span><span class="hljs-params">(<span class="hljs-string">&quot;fsig&quot;</span>,<span class="hljs-string">&quot;fsig&quot;</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1.</span>)</span>;<br><span class="hljs-comment">//model1(x) = fsig*gaus(x) + (1-fsig)*chev(x)</span><br>RooAddPdf <span class="hljs-title function_">model1</span><span class="hljs-params">(<span class="hljs-string">&quot;model1&quot;</span>,<span class="hljs-string">&quot;model1&quot;</span>,RooArgList(gaus,chev),fsig)</span>;<br><br>RooRealVar <span class="hljs-title function_">fbkg</span><span class="hljs-params">(<span class="hljs-string">&quot;fbkg2&quot;</span>,<span class="hljs-string">&quot;fbkg2&quot;</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1.</span>)</span>;<br><span class="hljs-comment">// model2(x) = fsig*gaus(x) + fbkg*chev(x) + (1-fsig-fbkg)*chev2(x) </span><br>RooAddPdf <span class="hljs-title function_">model2</span><span class="hljs-params">(<span class="hljs-string">&quot;model2&quot;</span>,<span class="hljs-string">&quot;model2&quot;</span>,RooArgList(gaus,chev,chev2),RooArgList(fsig,fbkg))</span>;<br><br>RooDataSet *data= model2.generate(x,<span class="hljs-number">1000</span>);<br>model2.fitTo(*data);<br>RooPlot* xframe =x.frame();<br>data-&gt;plotOn(xframe);<br>model2.plotOn(xframe);<br>model2.plotOn(xframe, Components(gaus),LineStyle(kDashed),LineColor(<span class="hljs-number">6</span>));<br>model2.plotOn(xframe, Components(<span class="hljs-string">&quot;chev2&quot;</span>),LineStyle(kDashed),LineColor(<span class="hljs-number">2</span>));<br>model2.plotOn(xframe, Components(<span class="hljs-string">&quot;chev*&quot;</span>),LineStyle(kDashed),LineColor(<span class="hljs-number">3</span>));<span class="hljs-comment">//有两种component的引用方法，当你有很多个组分需要一起画的时候，加双引号可以使用通配符“*”</span><br>xframe-&gt;Draw();<br></code></pre></td></tr></table></figure><p><img src="/postfigure/roofit_manual/image-20241231134812361.png"></p><center>Figure 5 - 画出复合pdf的不同组分</center><h4 id="Note-4"><a href="#Note-4" class="headerlink" title="Note 4"></a>Note 4</h4><ul><li><p>大多数情况下，在高能物理的数据拟合中，我们都会用Extended的模型，因为这样可以直接获取其中的事例数的多少。除此之外，使用复合模型的时候会因为你的可观测量(x)的范围发生变化而导致你的pdf形状发生改变，因为复合概率密度函数的表达式$ M(x) &#x3D; \sum_{i&#x3D;1}^{N-1} f_i F_i(x) + \left(1 - \sum_{i&#x3D;1}^{N-1} f_i \right) F_N(x) $ 中的系数是和函数的归一化密切相关的，你设置的可观测量范围就是归一化的范围，因此范围改变的时候函数形状也会发生改变。你可以通过下面的实例感受其中的区别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooGaussian <span class="hljs-title function_">gaus</span><span class="hljs-params">(<span class="hljs-string">&quot;gaus&quot;</span>,<span class="hljs-string">&quot;guas&quot;</span>,x,mean,sigma)</span>;<br>RooRealVar <span class="hljs-title function_">c0</span><span class="hljs-params">(<span class="hljs-string">&quot;c0&quot;</span>,<span class="hljs-string">&quot;c0&quot;</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooRealVar <span class="hljs-title function_">c1</span><span class="hljs-params">(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">-1.</span>,<span class="hljs-number">1.</span>)</span>;<br>RooChebychev <span class="hljs-title function_">chev</span><span class="hljs-params">(<span class="hljs-string">&quot;chev&quot;</span>,<span class="hljs-string">&quot;chev&quot;</span>,x,RooArgList(c0,c1))</span>;<br><br>RooRealVar <span class="hljs-title function_">fsig</span><span class="hljs-params">(<span class="hljs-string">&quot;fsig&quot;</span>,<span class="hljs-string">&quot;fsig&quot;</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1.</span>)</span>;<br><span class="hljs-comment">//model(x) = fsig*gaus(x) + (1-fsig)*chev(x)</span><br>RooAddPdf <span class="hljs-title function_">model</span><span class="hljs-params">(<span class="hljs-string">&quot;fsig&quot;</span>,<span class="hljs-string">&quot;fsig&quot;</span>,RooArgList(gaus,chev),fsig)</span>;<br><br><span class="hljs-comment">//按照一开始观测量设置的范围画出来的就是-10,10的范围</span><br>RooPlot* xframe =x.frame();<br>model.plotOn(xframe);<br>model.plotOn(xframe, Components(<span class="hljs-string">&quot;chev&quot;</span>),LineStyle(kDashed));<br>TCanvas *cv0 = new TCanvas(<span class="hljs-string">&quot;cv0&quot;</span>,<span class="hljs-string">&quot;cv0&quot;</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>cv0-&gt;cd();<br>xframe-&gt;Draw();<br><span class="hljs-comment">//观测量依然是-10,10的范围，但是改变了画图的范围</span><br>RooPlot* xframe1 =x.frame();<br>model.plotOn(xframe1);<br>model.plotOn(xframe1, Components(<span class="hljs-string">&quot;chev&quot;</span>),LineStyle(kDashed));<br>TCanvas *cv1 = new TCanvas(<span class="hljs-string">&quot;cv1&quot;</span>,<span class="hljs-string">&quot;cv1&quot;</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>cv1-&gt;cd();<br>xframe1-&gt;GetXaxis()-&gt;SetRangeUser(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>);<br>xframe1-&gt;Draw();<br><span class="hljs-comment">//重新设置了观测量的范围，变为-5,5</span><br>x.setRange(<span class="hljs-number">-5</span>,<span class="hljs-number">5</span>) ;<br>RooPlot* xframe2 =x.frame();<br><span class="hljs-comment">// data-&gt;plotOn(xframe);</span><br>model.plotOn(xframe2);<br>model.plotOn(xframe2, Components(<span class="hljs-string">&quot;chev&quot;</span>),LineStyle(kDashed));<br>TCanvas *cv2 = new TCanvas(<span class="hljs-string">&quot;cv2&quot;</span>,<span class="hljs-string">&quot;cv2&quot;</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br>cv2-&gt;cd();<br>xframe2-&gt;Draw();<br></code></pre></td></tr></table></figure></li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117145037537.png" alt="cv0"></div><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117145102163.png" alt="cv1"></div><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117145130113.png" alt="cv2"></div></div></div><center>Figure 6 - cv0(左)cv1(中)cv2(右)，你可以通过看曲线的最高点观察他们之间的区别</center><h2 id="4-选择、调整和创建基本函数"><a href="#4-选择、调整和创建基本函数" class="headerlink" title="4 选择、调整和创建基本函数"></a>4 选择、调整和创建基本函数</h2><p>我们现在详细了解 RooFit 提供的基本概率密度函数（p.d.f.），如何根据具体问题调整它们，以及如何在现有函数无法满足需求时自定义新的 p.d.f.。</p><h3 id="4-1-RooFit-提供了哪些-p-d-f"><a href="#4-1-RooFit-提供了哪些-p-d-f" class="headerlink" title="4.1 RooFit 提供了哪些 p.d.f.?"></a>4.1 RooFit 提供了哪些 p.d.f.?</h3><p>RooFit 包含一个约 20 个概率密度函数的库，可以作为构建模型的基本模块。这些函数包括：基本函数(basic functions)，非参数化函数(non-parametric functions)，受物理启发的函数(physics-inspired functions)，专用于 B 物理的衰变函数(specialized decay functions for B physics)。更详细的描述可参考附录 B 的 p.d.f. 图集。</p><h4 id="4-1-1-基本函数"><a href="#4-1-1-基本函数" class="headerlink" title="4.1.1 基本函数"></a>4.1.1 基本函数</h4><p>以下是 RooFit 提供的基本 p.d.f. 形状：</p><ul><li><p>高斯分布 <code>RooGaussian</code> 标准正态分布。</p></li><li><p>双分叉高斯分布 <code>RooBifurGauss</code>高斯分布的变体，允许独立设置均值两侧（低侧和高侧）的宽度。</p></li><li><p>指数分布 <code>RooExponential</code> 标准指数衰减分布。</p></li><li><p>多项式分布 <code>RooPolynomial</code>标准多项式形状，支持设置每个 $x^n$ 项的系数。</p></li><li><p>切比雪夫多项式 <code>RooChebychev</code>实现了第一类切比雪夫多项式。</p></li><li><p>泊松分布<code>RooPoisson</code> 标准泊松分布。</p></li></ul><p>每个 p.d.f. 的形式比标准形式少一个参数，因为归一化约束要求 p.d.f. 的积分始终为 1，从而消除了控制“垂直”尺度的自由度。</p><h4 id="4-1-2-非参数化函数"><a href="#4-1-2-非参数化函数" class="headerlink" title="4.1.2 非参数化函数"></a>4.1.2 非参数化函数</h4><p>RooFit 提供了两类可以描述外部数据分布形状的非参数化方法，无需显式参数化：</p><ul><li>直方图<code> RooHistPdf</code> 一个表示外部 RooDataHist 直方图形状的概率密度函数（p.d.f.）。可以选择性地通过插值构造平滑函数。</li><li>核估计 <code>RooKeysPdf</code>一个表示外部无分箱数据集形状的概率密度函数（p.d.f.）。它通过一系列高斯函数的叠加来表示形状，每个高斯具有相等的面积，但宽度可变，具体取决于局部事件密度。</li></ul><h4 id="4-1-3-受物理启发的函数"><a href="#4-1-3-受物理启发的函数" class="headerlink" title="4.1.3 受物理启发的函数"></a>4.1.3 受物理启发的函数</h4><p>除了基本形状外，RooFit 还实现了一系列常用于模拟物理“信号”分布的函数：</p><ul><li><p>Landau 分布 <code>RooLandau</code>用于参数化粒子在材料中的能量损失，没有解析形式。RooFit 使用 TMath::Landau 的参数化实现。</p></li><li><p>布赖特-维格纳分布（Breit-Wigner）<code>RooBreitWigner</code> 用于描述非相对论性布赖特-维格纳共振形状的分布。其扩展版本 Voigt 分布（类 RooVoigtian）结合了布赖特-维格纳分布和高斯分布，常用于在考虑有限探测器分辨率的情况下描述共振形状。</p></li><li><p>Crystal Ball 分布 <code>RooCBShape</code>在低端带有拖尾的高斯分。传统上用于描述不变质量中的辐射能量损失效应。</p></li><li><p>Novosibirsk 分布 <code>RooNovosibirsk</code> 一种修正的高斯分布，带有额外的尾参数。该尾参数会将高斯分布偏向不对称形状：一侧为长尾，另一侧为短尾。</p></li><li><p>Argus 分布 <code>RooArgusBG</code> 一种经验公式，用于模拟多体衰变在接近阈值时的相空间分布。在 B 物理研究中被广泛使用。</p></li><li><p>$D^{*\pm}-D^0$相空间分布 <code>RooDstD0BG</code> 一种具有单参数的经验函数。用于模拟$D^{*\pm}-D^0$不变质量差分布中的背景相空间。</p></li></ul><p>这些函数为建模物理信号分布提供了强大的工具，特别是在高能物理和核物理实验中具有重要应用。</p><h4 id="4-1-4-B-物理的专用函数"><a href="#4-1-4-B-物理的专用函数" class="headerlink" title="4.1.4 B 物理的专用函数"></a>4.1.4 B 物理的专用函数</h4><p>RooFit 最初为 SLAC 的 B 工厂实验 BaBar 开发，因此提供了一系列专门用于描述  介子衰变及其物理效应的概率密度函数（p.d.f.）。这些函数适用于包含混合、CP 破坏等现象的  衰变建模：</p><ul><li><p>衰变分布 <code>RooDecay</code>描述: 单边或双边指数衰变分布。</p></li><li><p>带混合的衰变分布 <code>RooBMixDecay</code> 单边或双边指数衰变分布，包含$B^0$-$\bar{B}^0$ 混合效应。</p></li><li><p>带标准模型 CP 破坏的衰变分布 <code>RooBCPEffDecay</code> 单边或双边指数衰变分布，包含标准模型中的 CP 破坏效应。</p></li><li><p>带通用 CP 破坏的衰变分布 <code>RooBCPGenDecay</code> 单边或双边指数衰变分布，使用通用参数化描述 CP 破坏效应。</p></li><li><p>衰变至非 CP 本征态的分布 <code> RooNonCPEigenDecay</code> 单边或双边指数衰变分布，描述衰变到非 CP 本征态的情况，并包含通用参数化的 CP 破坏效应。</p></li><li><p>通用衰变分布（包括混合、CP 和 CPT 破坏）<code> RooBDecay</code> 最通用的 B 衰变描述，支持可选的混合、CP 破坏和 CPT 破坏效应。</p></li></ul><p>这些专用函数为高能物理实验中的  衰变建模提供了灵活且强大的工具，尤其适用于涉及混合和对称性破坏研究的场景。</p><h3 id="4-2-重新参数化现有的基本-p-d-f"><a href="#4-2-重新参数化现有的基本-p-d-f" class="headerlink" title="4.2 重新参数化现有的基本 p.d.f."></a>4.2 重新参数化现有的基本 p.d.f.</h3><p>在第 3 章中提到，RooAbsPdf 类没有将变量固定为参数或观测值的内在概念。事实上，RooFit 的函数和概率密度函数（p.d.f.）对函数参数是否是变量（例如 RooRealVar）并没有强制要求。因此，可以通过将函数替代参数来修改任何现有 p.d.f. 的参数化。</p><p>以下代码示例展示了如何通过重新参数化构造一个新的 p.d.f.：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 定义观测变量 x</span><br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br><span class="hljs-comment">// 构造第一个高斯函数 sig_left(x, mean, sigma)</span><br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">10</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma_core&quot;</span>, <span class="hljs-string">&quot;sigma (core)&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">10.</span>)</span>;<br>RooGaussian <span class="hljs-title function_">sig_left</span><span class="hljs-params">(<span class="hljs-string">&quot;sig_left&quot;</span>, <span class="hljs-string">&quot;signal p.d.f.&quot;</span>, x, mean, sigma)</span>;<br><span class="hljs-comment">// 构造偏移函数 mean_shifted(mean, shift)</span><br>RooRealVar <span class="hljs-title function_">shift</span><span class="hljs-params">(<span class="hljs-string">&quot;shift&quot;</span>, <span class="hljs-string">&quot;shift&quot;</span>, <span class="hljs-number">3.0</span>)</span>;<br>RooFormulaVar <span class="hljs-title function_">mean_shifted</span><span class="hljs-params">(<span class="hljs-string">&quot;mean_shifted&quot;</span>, <span class="hljs-string">&quot;mean+shift&quot;</span>, RooArgSet(mean, shift))</span>;<br><span class="hljs-comment">// 构造第二个高斯函数 sig_right(x, mean_shifted, sigma)</span><br>RooGaussian <span class="hljs-title function_">sig_right</span><span class="hljs-params">(<span class="hljs-string">&quot;sig_right&quot;</span>, <span class="hljs-string">&quot;signal p.d.f.&quot;</span>, x, mean_shifted, sigma)</span>;<br><span class="hljs-comment">// 构造总 p.d.f. sig = sig_left + sig_right</span><br>RooRealVar <span class="hljs-title function_">frac_left</span><span class="hljs-params">(<span class="hljs-string">&quot;frac_left&quot;</span>, <span class="hljs-string">&quot;fraction (left)&quot;</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>)</span>;<br>RooAddPdf <span class="hljs-title function_">sig</span><span class="hljs-params">(<span class="hljs-string">&quot;sig&quot;</span>, <span class="hljs-string">&quot;signal&quot;</span>, RooArgList(sig_left, sig_right), frac_left)</span>;<br></code></pre></td></tr></table></figure><p>最终构建的 p.d.f. sig 是由两个高斯函数组成的，其中第二个高斯的均值相对于第一个高斯的均值偏移了一个固定量 shift。这种方法通过公式对象（RooFormulaVar）实现了动态参数化，提供了灵活的分布构造方式。</p><p><img src="/postfigure/roofit_manual/image-20241231151722463.png"  style="zoom:50%;" /><img src="/postfigure/roofit_manual/image-20241231151808442.png" style="zoom:50%;" /></p><center>Figure 7 - 用`RooFormulaVar`设置一个固定的偏移量</center><h4 id="4-2-1-RooFormulaVar"><a href="#4-2-1-RooFormulaVar" class="headerlink" title="4.2.1 RooFormulaVar"></a>4.2.1 <code>RooFormulaVar</code></h4><p><code>RooFormulaVar</code> 是一种可求值的实值函数，通过 ROOT 的 <code>TFormula</code> 引擎解释公式表达式来完成计算。例如，在上述例子中，用 mean+shift 计算右侧高斯分布的均值位置。</p><p>尽管复合 p.d.f. sig 的形式与两个普通高斯分布（各自独立均值）的组合没有差别，但重新参数化模型的能力提供了一些新的便利。例如，可以让均值 mean 浮动拟合，同时保持两个高斯之间的距离 shift 固定。Figure 7 展示了在上述例子中，对于 mean&#x3D;-3 和 mean&#x3D;3 以及 shift&#x3D;3 和 shift&#x3D;6 的组合情况，分别绘制出的红色和蓝色 sig 分布。</p><p><code>RooFormulaVar</code>支持的表达式与 ROOT 的 <code>TFormula</code> 一致，包括大部分数学操作符（+、-、&#x2F;、* 等）、嵌套括号以及一些基础数学和三角函数（如 sin、cos、log、abs 等）。可以通过公式表达式中变量的名称（在构造函数的第三个参数 RooArgSet 中提供）进行引用。也可以通过位置索引引用变量，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">RooFormulaVar <span class="hljs-title function_">mean_shifted</span><span class="hljs-params">(<span class="hljs-string">&quot;mean_shifted&quot;</span>, <span class="hljs-string">&quot;@0+@1&quot;</span>, RooArgList(mean, shift))</span>;<br></code></pre></td></tr></table></figure><p>这种方式在采用“工厂风格”编程时尤为方便，因为在编写代码时不需要知道变量的具体名称。</p><p>对于简单的数学变换，RooFit 提供了以下实用工具类：<code>RooPolyVar</code>实现多项式函数，<code>RooAddition</code>实现多个组件的加和，<code>RooProduct</code>实现多个组件的乘积。这些类可以满足常见的简单组合需求。如果需要更复杂的变换，可以通过编写专门的类来实现。</p><h3 id="4-3-写一个新的p-d-f-类"><a href="#4-3-写一个新的p-d-f-类" class="headerlink" title="4.3 写一个新的p.d.f.类"></a>4.3 写一个新的p.d.f.类</h3><p>如果现有的 p.d.f. 类都不符合您的需求，且没有人可以通过使用 RooFormulaVar 来进行自定义，那么编写您自己的 RooFit p.d.f. 类是非常容易的。</p><h4 id="4-3-1-RooGenericPdf-解释型通用-p-d-f-类"><a href="#4-3-1-RooGenericPdf-解释型通用-p-d-f-类" class="headerlink" title="4.3.1 RooGenericPdf 解释型通用 p.d.f. 类"></a>4.3.1 <code>RooGenericPdf</code> 解释型通用 p.d.f. 类</h4><p>如果您的模型的公式表达式相对简单，且性能不是关键因素，您可以使用 RooGenericPdf，它会像 RooFormulaVar 一样解释您的 C++ 表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span> ; <br>RooRealVar <span class="hljs-title function_">alpha</span><span class="hljs-params">(<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>)</span> ;<br>RooGenericPdf <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;sqrt(abs(alpha*x))+0.1&quot;</span>,RooArgSet(x,alpha))</span> ;<br><br>RooPlot* xframe =x.frame();<br>g.plotOn(xframe);<br>alpha=<span class="hljs-number">1e-4</span> ;<br>g.plotOn(xframe,LineColor(<span class="hljs-number">2</span>));<br>xframe-&gt;Draw();<br></code></pre></td></tr></table></figure><p>输入到 g 中的公式表达式在返回 p.d.f. g 的值之前会通过数值积分显式地进行归一化，因此不要求提供的表达式本身是归一化的。自动归一化在图 14 中得到了很好的展示，图中显示了参数 alpha 的两个值对应的 p.d.f. g。如果您的公式表达式比上述示例更复杂，您应编写一个编译后的类来实现您的函数。</p><p><img src="/postfigure/roofit_manual/image-20241231152952026.png"></p><center>Figure 8 - 用 RooGenericPdf 自定义一个pdf并且不需要特意归一化</center><h4 id="4-3-2-RooClassFactory"><a href="#4-3-2-RooClassFactory" class="headerlink" title="4.3.2  RooClassFactory"></a>4.3.2  <code>RooClassFactory</code></h4><p>实用类 <code>RooClassFactory</code> 简化了编写自定义 RooFit p.d.f. 类的任务，主要是将实际的 p.d.f. 表达式写出来。该类工厂有几种操作模式。最简单的操作模式是针对足够简单的函数表达式，这些表达式可以用一行代码来表示。在这种情况下，可以按如下方式编写一个完全功能的自定义 p.d.f. 类：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">RooClassFactory::makePdf(<span class="hljs-string">&quot;RooMyPdf&quot;</span>,<span class="hljs-string">&quot;x,alpha&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;sqrt(abs(x*alpha))+0.1&quot;</span>);<br></code></pre></td></tr></table></figure><p>这个操作会生成两个文件，RooMyPdf.cxx 和 RooMyPdf.h，这些文件可以编译并通过 ACliC 链接以供立即使用。在 ROOT 中，可以通过以下命令加载：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">root&gt; .L RooMyPdf.cxx+<br></code></pre></td></tr></table></figure><p>这是将原始示例用新的编译类 RooMyPdf 重写后的版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span> ;<br>RooRealVar <span class="hljs-title function_">alpha</span><span class="hljs-params">(<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>)</span> ;<br>RooMyPdf <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;compiled class g&quot;</span>,x,alpha)</span> ;<br></code></pre></td></tr></table></figure><p>如果您的函数表达式不够简单，无法用一行代码表示，您可以在请求 RooClassFactory 创建类时简单地省略表达式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">RooClassFactory::makePdf(<span class="hljs-string">&quot;RooMyPdf&quot;</span>,<span class="hljs-string">&quot;x,alpha&quot;</span>) ;<br></code></pre></td></tr></table></figure><p>这会创建一个功能完全的类，并提供一个 RooAbsPdf::evaluate() 的虚拟实现。为了使其成为一个功能完整的类，您需要编辑 RooMyPdf.cxx 文件，并在类的 evaluate() 方法中插入函数表达式作为返回值，您可以使用任意数量的代码行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">Double_t <span class="hljs-title function_">RooMyPdf::evaluate</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> &#123;<br>  <span class="hljs-comment">// 在此处插入基于变量参数的表达式</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>您可以将您在 makePdf() 调用中列出的所有符号作为 C++ 的 double 对象使用。由于 RooAbsPdf 对变量是否是观测量或参数没有固定的解释，因此在 evaluate() 中明确地对某个特定的观测量进行归一化没有必要或意义：evaluate() 的返回值总是在返回通过 RooAbsPdf::getVal() 之前，通过归一化积分进行后期归一化。默认情况下，这个归一化步骤是通过数值积分器完成的，但如果您知道如何在一个（或多个）观测量的选择下进行积分，您可以在 p.d.f. 中声明这个功能，并且在合适的时候会使用您的解析积分，而不是数值积分。</p><p>您可以使用不同的选项调用 RooClassFactory::makePdf()，它会为解析积分接口生成框架代码。详细信息可以在 RooClassFactory 的 HTML 类文档中找到。关于如何编写 p.d.f. 类以支持解析积分和内部事件生成处理的更多信息，参见第 14 章。</p><h4 id="4-3-3-自定义-p-d-f-对象的实例化方法（使用-RooClassFactory）"><a href="#4-3-3-自定义-p-d-f-对象的实例化方法（使用-RooClassFactory）" class="headerlink" title="4.3.3 自定义 p.d.f 对象的实例化方法（使用 RooClassFactory）"></a>4.3.3 自定义 p.d.f 对象的实例化方法（使用 <code>RooClassFactory</code>）</h4><p>RooClassFactory 的另一种操作模式是请求工厂立即编译并实例化一个基于给定变量对象集合的对象。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooAbsPdf* myPdf = RooClassFactory::<span class="hljs-built_in">makePdfInstance</span>(<span class="hljs-string">&quot;RooMyPdf&quot;</span>, <span class="hljs-string">&quot;sqrt(abs(x*alpha))+0.1&quot;</span>, <span class="hljs-built_in">RooArgSet</span>(x,alpha));<br></code></pre></td></tr></table></figure><p>需要注意的是，这种调用方式与创建 <code>RooGenericPdf</code> 类型对象的方式非常相似：你提供一个包含 C++ 函数表达式的字符串和一组输入变量，工厂返回一个实现该函数形状的 <code>RooAbsPdf</code> 实例。两者的区别在于代码生成的方式：</p><ul><li><strong>RooGenericPdf</strong>：采用解释的方式。</li><li><strong>RooClassFactory</strong>：采用编译的方式。</li></ul><p>具体选择哪种方式取决于使用场景：</p><ul><li><strong>RooGenericPdf</strong> 方法几乎没有启动开销，但在绘图、事件生成和拟合的执行速度上会有所降低。</li><li><strong>RooClassFactory</strong> 方法会带来更快的执行速度，但每次宏运行时需要几秒钟的编译和链接代码的启动开销。</li></ul><h4 id="4-3-4-使用-RooClassFactory-编写新函数类"><a href="#4-3-4-使用-RooClassFactory-编写新函数类" class="headerlink" title="4.3.4 使用 RooClassFactory 编写新函数类"></a>4.3.4 使用 <code>RooClassFactory</code> 编写新函数类</h4><p>除了创建 p.d.f. 的框架代码，<code>RooClassFactory</code> 还可以为通用的实值函数生成框架代码。这些函数类是 <code>RooFit</code> 中继承自 <code>RooAbsReal</code> 的所有类。<code>RooFormulaVar</code> 就是一个通用实值函数的典型例子。</p><p>与 p.d.f. 不同的是，<code>RooAbsReal</code> 类的对象不需要归一化到 1，也可以取负值。在以下两种情况下，编译自定义的实值函数是一个很好的选择：</p><ol><li>表达式较为复杂。</li><li>性能要求较高。</li></ol><p>要为通用函数对象生成框架代码，可以使用 <code>RooClassFactory</code> 的 <code>makeFunction()</code> 方法。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">RooClassFactory::<span class="hljs-built_in">makeFunction</span>(<span class="hljs-string">&quot;RooMyFunction&quot;</span>, <span class="hljs-string">&quot;x,b&quot;</span>);<br></code></pre></td></tr></table></figure><p>该代码将创建一个通用函数类的框架代码，方便用户进行进一步的自定义和优化。</p><h4 id="Note-5"><a href="#Note-5" class="headerlink" title="Note 5"></a>Note 5</h4><p>除了一些RooFit中自带的pdf，我们会用一些自定义的函数去更好地解释实验中的数据。</p><ul><li><p>用<code>RooFormulaVar</code>去构建特殊的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">RooFormulaVar <span class="hljs-title function_">mean_shifted</span><span class="hljs-params">(<span class="hljs-string">&quot;mean_shifted&quot;</span>, <span class="hljs-string">&quot;mean+shift&quot;</span>, RooArgSet(mean, shift))</span>;<br>RooFormulaVar <span class="hljs-title function_">mean_shifted</span><span class="hljs-params">(<span class="hljs-string">&quot;mean_shifted&quot;</span>, <span class="hljs-string">&quot;@0+@1&quot;</span>, RooArgList(mean, shift))</span>;<br></code></pre></td></tr></table></figure></li><li><p>用<code>RooGenericPdf</code>构建简单的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span> ; <br>RooRealVar <span class="hljs-title function_">alpha</span><span class="hljs-params">(<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-string">&quot;alpha&quot;</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>)</span> ;<br>RooGenericPdf <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;sqrt(abs(alpha*x))+0.1&quot;</span>,RooArgSet(x,alpha))</span>;<br></code></pre></td></tr></table></figure></li><li><p>用<code>RooClassFactory</code>构建复杂的函数，会生成对应的.h和.cxx文件，后续章节中会详细说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">RooAbsPdf* myPdf = RooClassFactory::makePdfInstance(<span class="hljs-string">&quot;RooMyPdf&quot;</span>, <span class="hljs-string">&quot;sqrt(abs(x*alpha))+0.1&quot;</span>, RooArgSet(x,alpha));<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-将一个-p-d-f-或函数与另一个-p-d-f-卷积"><a href="#5-将一个-p-d-f-或函数与另一个-p-d-f-卷积" class="headerlink" title="5 将一个 p.d.f. 或函数与另一个 p.d.f. 卷积"></a>5 将一个 p.d.f. 或函数与另一个 p.d.f. 卷积</h2><h3 id="5-1-引言"><a href="#5-1-引言" class="headerlink" title="5.1 引言"></a>5.1 引言</h3><p>在高能物理实验中，实验数据分布通常是由一个理论分布经过探测器响应函数修正后的结果。在最一般的情况下，这种分布可以用理论模型 $T(x,a) $ 描述粒子的基本物理分布和探测器响应函数$R(x,b)$ 描述探测器对粒子的测量误差或分辨率的卷积来描述：</p><p>$M(x, a, b) &#x3D; T(x,a)\otimes R(x,b)&#x3D; \int^{+\infty}_{-\infty} T(x, a) , R(x - x’, b) , dx’$</p><p>一个常见的例子是将 Breit-Wigner 理论模型与高斯探测器响应函数相卷积，其结果如图 9 所示。如果你想了解更多关于卷积的概念，这个视频中介绍了两种很形象的理解方式——<a href="https://www.bilibili.com/video/BV1Yk4y1K7Az/">卷积的两种可视化|概率论中的X+Y既美妙又复杂</a>，或者参考相关书籍。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117211440674.png" alt="image-20250117211440674"></div><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117211518396.png" alt="image-20250117211518396"></div><div class="group-image-wrap"><img src="/postfigure/roofit_manual/image-20250117211605814.png" alt="image-20250117211605814"></div></div></div><center>Figure 9 -  Breit-Wigner 理论模型与高斯探测器响应函数卷积</center><p>通常，所得分布可能主要由探测器响应主导，此时 M(x,a,b)可以有效地用 R(x,b)近似（图 9-左）；或者主要由理论模型主导，此时 M(x,a,b)可以有效地用 T(x,a) 近似（图 9-右）。然而，当两种函数的效应具有相当的量级时（图 9-中），可能需要显式计算卷积积分。在本章节中，我们将解释如何在 RooFit 中计算此类卷积。</p><h4 id="5-1-1-卷积的计算"><a href="#5-1-1-卷积的计算" class="headerlink" title="5.1.1 卷积的计算"></a>5.1.1 卷积的计算</h4><p>在概率密度函数中进行卷积计算通常在计算上具有一定的挑战性。仅在少数情况下，对于 $R(x)$ 和 $ T(x)$ 的特定选择，卷积分可以解析计算；对于所有其他情况，卷积积分需要在区间$[-\infty, \infty]$上进行数值积分。</p><p>此外，对于概率密度函数，还需要进行显式的归一化步骤，因为两个在有限区域上归一化的概率密度函数的卷积并不一定自身归一化。因此，对于概率密度函数 $M$ 的表达式为：</p><p>$M(x) &#x3D; T(x,a)\otimes R(x,b)&#x3D;\frac{\int_{-\infty}^\infty T(x, a) R(x - x’, b) dx’}{\int_{x_{min}}^{x_{max}} \int_{-\infty}^\infty T(x, a) R(x - x’, b) dx’ dx}$</p><p>该归一化过程确保 $M(x)$ 满足概率密度函数的性质，即其在定义域上的积分为 1。</p><h4 id="5-1-2-卷积计算的多种选择"><a href="#5-1-2-卷积计算的多种选择" class="headerlink" title="5.1.2 卷积计算的多种选择"></a>5.1.2 卷积计算的多种选择</h4><p>RooFit 提供了三种方法来表示卷积概率密度函数：</p><ol><li>使用傅里叶变换进行数值卷积计算。  </li><li>使用直接积分进行数值卷积计算。  </li><li>针对特定概率密度函数的解析卷积计算。</li></ol><h3 id="5-2-数值卷积与傅里叶变换"><a href="#5-2-数值卷积与傅里叶变换" class="headerlink" title="5.2 数值卷积与傅里叶变换"></a>5.2 数值卷积与傅里叶变换</h3><p>对于大多数应用，使用傅里叶变换空间计算的数值卷积在灵活性、精度和计算强度之间提供了最佳的权衡。为了更好地理解使用离散傅里叶变换计算卷积的特点，我们首先简要介绍一下基础数学。</p><h4 id="5-2-1-圆卷积定理和离散傅里叶变换"><a href="#5-2-1-圆卷积定理和离散傅里叶变换" class="headerlink" title="5.2.1 圆卷积定理和离散傅里叶变换"></a>5.2.1 圆卷积定理和离散傅里叶变换</h4><p>圆卷积定理指出，两个系数序列$ x_i$ 和 $y_i$ 在空间域的卷积可以通过在频率域中将系数进行简单的乘法运算来计算，即：$(x \otimes y)_n \underset{F}{\Leftrightarrow}\left(x_k \cdot y_k\right)$</p><p>该定理使得我们可以在不显式计算积分的情况下计算卷积。缺点是它需要傅里叶变换和离散输入数据。然而，实际上，这些问题比在开放域上进行数值积分要更容易解决。该定理的另一个特点是，对于有限的 n，卷积观察量被视为周期性的，这在某些应用中可能是需要的，在其他情况下则可能不需要。我们稍后会回到这一点。</p><p>为了能够使用离散傅里叶变换，所有连续的输入函数必须被采样成离散的分布：</p><p>$F(x) \underset{sampling}{\Longrightarrow } x_i $</p><p>任何这样的离散分布 x_i 都可以通过傅里叶变换在频率域中表示为等数量的系数 X_i：</p><p>$X_k &#x3D; \sum_{n&#x3D;0}^{N-1} x_n e^{-\frac{2\pi i}{N} k n}$</p><p>空间域的系数 x_i 和频率域的系数 X_i 通常都是复数。如果输入系数 x_i 是实数（如从概率密度函数采样时的情况），则频率域的系数 X_i 会展示对称性，即 X_{n-k} &#x3D; X_k^*。相反，频率域中的分布可以通过反傅里叶变换（逆变换）转换回空间域中的分布：</p><p>$x_k &#x3D; \frac{1}{n} \sum_{n&#x3D;0}^{n-1} X_n e^{\frac{2\pi i}{n} k n}$</p><p>反变换的空间域系数 x_k 通常是复数，除非频率域的系数 X_n 满足对称性 X_{n-k} &#x3D; X_k^*，此时所有 x_k 都是实数。</p><p>RooFFTConvPdf 类</p><p>RooFFTConvPdf 类实现了以下算法，用于计算类型为 M(x) &#x3D; T(x) * R(x) 的圆卷积：</p><p>​1.将 T(x) 采样到数组 t_i 中，并将 R(x) 采样到数组 r_i 中；</p><p>​2.对数组 t_i 和 r_i 进行傅里叶变换，得到 T_i 和 R_i 频率域系数；</p><p>​3.在频率域中计算卷积： M_i &#x3D; T_i \cdot R_i；</p><p>​4.对数组 M_i 进行反傅里叶变换，得到 m_i 空间域系数；</p><p>​5.通过插值将数组 m_i 表示为连续函数 M(x)。</p><p>该方法的大部分计算工作集中在（逆）离散傅里叶变换的计算上。离散傅里叶变换的快速计算是信号处理领域的一个重要研究课题，并且已有很好的算法可以高效地计算这些变换。RooFit 使用了免费提供的 FFTW3 包，它通过 TVirtualFFT 类与 ROOT 进行接口连接，并提供了最快的离散傅里叶变换实现之一。这意味着，要使用 RooFFTConvPdf，你必须确保在 ROOT 安装中包含了 FFTW。</p><h2 id="6-构建多维模型"><a href="#6-构建多维模型" class="headerlink" title="6 构建多维模型"></a>6 构建多维模型</h2><h3 id="6-1-引言"><a href="#6-1-引言" class="headerlink" title="6.1 引言"></a>6.1 引言</h3><p>许多数据分析问题涉及不止一个观测量。当观测量之间的相关性包含大量信息时，从这些分布中提取信息可能会变得复杂。为了解决这样的多变量问题，通常使用两种主要方法。</p><p>第一种方法是使用机器学习的多变量分析（MVA）来构造一个一维的判别量（discriminant），尽可能捕获多维分布中包含的信息。这种方法功能强大且易于管理，得益于像 TMVA 这样的工具，它为各种技术（例如神经网络、提升决策树（Boosted Decision Trees）、支持向量机（SVM）等）提供了统一的训练和应用接口。最终的拟合通常在判别量或未用于判别量的一剩余观测量上进行，以提取最终结果。</p><p>另一种方法是为所有输入观测量构建一个显式的多维信号和背景描述，形式为多维似然分布。这种方法较少依赖自动化，除非所有观测量都是不相关的，但理论上它的能力不低于 Neyman-Pearson 引理所给出的任何多变量分布的最优判别量：</p><p>$D(\vec{x}) &#x3D; \frac{S(\vec{x})}{B(\vec{x})}$</p><p>其中S(x)和B(x)分别是真正的信号和背景分布。当经验分布S(x)和B(x)与真实分布匹配时，可达到上述最优判别量。这种方法的挑战来自两个方面: 需要对预期分布的形状有深入的了解，需要找到一个能够描述该多维分布的显式公式。第一个挑战实际上是这种方法的一个特性：如果处理得当，模型中仅包含您能够很好理解和解释的参数，且仅具有您认为相关的自由度。而机器学习训练的判别量参数可能从完全不可解释（例如神经网络权重）到部分可理解（例如未提升的决策树）不等。</p><p>RooFit 在这一过程中扮演的角色是简化第二个挑战，即直观地为具有相关性的多维分布构建显式模型的能力。图 21 所示的二维模型便是 RooFit 功能的一个例子。该分布为：对于每个 $ y $ 值，$ x $ 的分布是一个高斯分布，且高斯分布的均值依赖于 $ y $；同时，$ y $ 的分布本身也是一个高斯分布。</p><p>在纯 C++ 中，准确地描述这种分布及其相关性的二维概率密度函数 $ H(x, y) $ 是一项具有挑战性的任务。然而，在 RooFit 中，仅需四行代码即可按照此处描述的方式构建分布：编写一个条件概率密度函数 $ F(x|y) $，表示给定 $ y $ 值时 $ x $ 的分布；构建描述 $ y $ 分布的概率密度函数 $ G(y) $；将这两部分信息组合起来。RooFit 能够表示具有相关性的多维分布的能力来源于其灵活的概率密度函数归一化策略，该策略允许任意概率密度函数用作条件概率密度函数。</p><p>在本节的其余部分，我们将指导您以多种方式构建多维模型的基本操作。多维模型中特定的使用问题将在第 7 章讨论。</p><h3 id="6-2-使用多维模型"><a href="#6-2-使用多维模型" class="headerlink" title="6.2 使用多维模型"></a>6.2 使用多维模型</h3><p>在深入探讨如何最佳构建多维模型之前，我们先简要概述一下RooFit的绘图、拟合和事件生成接口是如何扩展到具有多个观测量的模型的。为了说明所有基本概念，我们构造了一个在观测量x和y上的二维RooGenericPdf。我们选择了最简单的公式，因为多维概率密度函数（p.d.f.）的内部结构与绘图、拟合和生成接口无关：这些接口的工作方式不受模型结构的影响。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;  <br>RooRealVar <span class="hljs-title function_">y</span><span class="hljs-params">(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>;  <br>RooRealVar <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">5</span>)</span>;  <br>RooRealVar <span class="hljs-title function_">b</span><span class="hljs-params">(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>)</span>;  <br>RooGenericPdf <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;a*x*x+b*y*y-0.3*y*y*y&quot;</span>,RooArgSet(x,y,a,b))</span>;  <br></code></pre></td></tr></table></figure><h4 id="6-2-1-评估"><a href="#6-2-1-评估" class="headerlink" title="6.2.1 评估"></a>6.2.1 评估</h4><p>在第2章中已经解释，当评估一个RooFit的概率密度函数时，必须明确指定哪些变量是观测量。如果有多个观测量，只需传递包含所有观测量的RooArgSet，而不是单个RooAbsArg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">f.getVal(RooArgSet(x,y));<br></code></pre></td></tr></table></figure><h4 id="6-2-2-生成和拟合"><a href="#6-2-2-生成和拟合" class="headerlink" title="6.2.2 生成和拟合"></a>6.2.2 生成和拟合</h4><p>由于生成和拟合过程自然地定义了观测量，因此接口扩展到多个观测量的方式十分直接。在事件生成中，可以传递包含观测量的RooArgSet，而不是单个观测量；在拟合中，由于所传递的RooDataSet已经定义了观测量（在本例中为两个观测量），接口无需任何改变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 生成一个二维数据集data(x,y)  </span><br>RooDataSet* data = f.generate(RooArgSet(x,y),<span class="hljs-number">10000</span>);  <br><span class="hljs-comment">// 将二维模型f(x,y)拟合到数据data(x,y)  </span><br>f.fitTo(*data); <br></code></pre></td></tr></table></figure><h4 id="6-2-3-绘图"><a href="#6-2-3-绘图" class="headerlink" title="6.2.3 绘图"></a>6.2.3 绘图</h4><p>绘图接口依然保持不变，但现在可以为每个观测量单独生成一个图像：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 绘制数据data(x,y)和模型f(x,y)的x分布  </span><br>RooPlot* framex = x.frame(); <br>data-&gt;plotOn(framex); <br>f.plotOn(framex);  <br><br><span class="hljs-comment">// 绘制数据data(x,y)和模型f(x,y)的y分布  </span><br>RooPlot* framey = y.frame(); <br>data-&gt;plotOn(framey); <br>f.plotOn(framey);  <br></code></pre></td></tr></table></figure><p>上述例子的输出如图22所示。图22中的两个图像能直观地符合预期，这并非完全是偶然的，它反映了RooFit在后台为你完成的一些记录工作</p><p>绘制数据十分简单：要获得数据data(x,y)的x分布，只需忽略y值，并用x值填充直方图。而绘制概率密度函数（p.d.f.）则稍微复杂一些：需要绘制gaussxy(x,y)在x或y上的投影，以得到与数据相同解释的分布。RooFit默认使用的技术是积分</p><p>$ F_x(x;p) &#x3D; \int p(x, y;p) , dy $</p><p>RooPlots的一个关键特性是，它会跟踪需要投影的观测量：如果你在x的RooPlot中绘制一个数据集D(x,y,z)，系统会记住观测量y和z的存在。任何随后在该图框上绘制的具有观测量y和&#x2F;或z的概率密度函数将自动在这些观测量上进行投影。关于任何投影积分的信息都会以消息的形式告知：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">RooAbsReal::plotOn(fxy) plot on x integrates over <span class="hljs-title function_">variables</span> <span class="hljs-params">(y)</span>  <br><span class="hljs-title function_">RooAbsReal::plotOn</span><span class="hljs-params">(fxy)</span> plot on y integrates over <span class="hljs-title function_">variables</span> <span class="hljs-params">(x)</span><br></code></pre></td></tr></table></figure><p>关于多维模型使用可能性的完整概述详见第7章。</p><h3 id="6-3-模型构建策"><a href="#6-3-模型构建策" class="headerlink" title="6.3 模型构建策"></a>6.3 模型构建策</h3><p>现在我们回到本章的核心问题：多维模型的构建。前面部分所使用的整体多维模型在实际应用中很少有用。大多数多维模型是通过使用组合或乘积技术从低维模型构建而来的，如开篇部分描述的示例所示。我们将在这里简要比较这两种技术，并在后续部分详细探讨其技术细节。</p><h4 id="6-3-1-乘积法"><a href="#6-3-1-乘积法" class="headerlink" title="6.3.1 乘积法"></a>6.3.1 乘积法</h4><p>乘积法是一种将两个或多个具有不同观测量的概率密度函数（p.d.f.）组合成一个更高维、无相关性的p.d.f.的直接方法：</p><p>$C(x, y; a, b) &#x3D; A(x; a) \cdot B(y; b)$</p><p>正交p.d.f.的乘积具有以下吸引人的性质：如果输入p.d.f.是归一化的，那么它们的乘积也是归一化的：</p><p>$\int \int C(x, y) , dx y &#x3D; \int \int A(x) B(y)dxdy&#x3D; \int A(x) , dx \cdot \int B(y) , dy &#x3D; 1$</p><h4 id="6-3-2-组合法"><a href="#6-3-2-组合法" class="headerlink" title="6.3.2 组合法"></a>6.3.2 组合法</h4><p>组合技术通过用至少一个新观测量的函数替换某个参数来构造多维模型。例如，给定一个以观测量 x 为自变量的高斯函数 $\text{Gauss}(x; m, \sigma)$ ，可以通过以下方式创建一个以 x 和 y 为观测量的二维p.d.f.  ：</p><p>$F(x,y;  m,\sigma,a) &#x3D; \text{gauss}(x, M(y), \sigma)$ 其中 $M(y)&#x3D;m+a \cdot y$</p><p>我们在第4章已经见过这种技术，当时我们用它来调整现有形状的参数化。这里唯一新增的概念在于其解释：并没有什么限制新引入的变量 y 不能作为观测量使用，因此实际上我们将一维高斯p.d.f.扩展为一个基于第二个观测量 y 的均值偏移的二维高斯函数。</p><p>组合法的一个重要优势是，它可以简单地引入观测量之间的相关性，这是乘积法无法直接实现的。</p><h4 id="6-3-3-组合与乘积的结合"><a href="#6-3-3-组合与乘积的结合" class="headerlink" title="6.3.3 组合与乘积的结合"></a>6.3.3 组合与乘积的结合</h4><p>尽管组合法能够生成功能完善的多维p.d.f.并能很好地控制相关性，但通常不能很好地控制新引入的观测量的分布。在上述代码示例中， x 的分布及其如何随 y 变化是明确的，但 y 本身的分布并不清晰。因此，组合法生成的p.d.f.通常用作条件p.d.f. F(x|y) 而不是联合p.d.f. F(x, y) 。随后，再与一个独立的p.d.f. G(y) 相乘，形成一个良好控制的二维模型：$H(x, y) &#x3D; F(x|y) \cdot G(y)$</p><p>这种方法结合了两种技术的优势：组合法用于引入相关性，而乘积法用于生成良好控制的观测量分布。</p><h3 id="6-4-通过乘积构造多维模型-Multiplication"><a href="#6-4-通过乘积构造多维模型-Multiplication" class="headerlink" title="6.4 通过乘积构造多维模型(Multiplication)"></a>6.4 通过乘积构造多维模型(Multiplication)</h3><p>我们通常使用乘积去构建多维函数模型</p><h4 id="6-4-1-RooProdPdf类"><a href="#6-4-1-RooProdPdf类" class="headerlink" title="6.4.1 RooProdPdf类"></a>6.4.1 <code>RooProdPdf</code>类</h4><p>在RooFit中，任何形式的概率密度函数（p.d.f.）乘积都通过RooProdPdf类构造。以下是一个简单示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C">RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>; <br>RooRealVar <span class="hljs-title function_">meanx</span><span class="hljs-params">(<span class="hljs-string">&quot;meanx&quot;</span>,<span class="hljs-string">&quot;mean of x&quot;</span>,<span class="hljs-number">0</span>)</span>;  <br>RooRealVar <span class="hljs-title function_">sigmax</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmax&quot;</span>,<span class="hljs-string">&quot;sigma of x&quot;</span>,<span class="hljs-number">2</span>)</span>;  <br>RooGaussian <span class="hljs-title function_">gx</span><span class="hljs-params">(<span class="hljs-string">&quot;gx&quot;</span>,<span class="hljs-string">&quot;Gaussian for x&quot;</span>,x,meanx,sigmax)</span>; <br><br>RooRealVar <span class="hljs-title function_">y</span><span class="hljs-params">(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10</span>)</span>; <br>RooRealVar <span class="hljs-title function_">meany</span><span class="hljs-params">(<span class="hljs-string">&quot;meany&quot;</span>,<span class="hljs-string">&quot;mean of y&quot;</span>,<span class="hljs-number">0</span>)</span>; <br>RooRealVar <span class="hljs-title function_">sigmay</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmay&quot;</span>,<span class="hljs-string">&quot;sigma of y&quot;</span>,<span class="hljs-number">2</span>)</span>;  <br>RooGaussian <span class="hljs-title function_">gy</span><span class="hljs-params">(<span class="hljs-string">&quot;gy&quot;</span>,<span class="hljs-string">&quot;Gaussian for y&quot;</span>,y,meany,sigmay)</span>;  <br><br>RooProdPdf <span class="hljs-title function_">gaussxy</span><span class="hljs-params">(<span class="hljs-string">&quot;gaussxy&quot;</span>,<span class="hljs-string">&quot;gx*gy&quot;</span>,RooArgSet(gx,gy))</span>;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们通过RooProdPdf将两个一维高斯p.d.f. gx 和 gy 相乘，构造了一个二维p.d.f. gaussxy 。这种乘积p.d.f.可以像z之前的整体p.d.f. f 一样用于拟合和生成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">RooDataSet* data = gaussxy.generate(RooArgSet(x,y),<span class="hljs-number">10000</span>) ;<br>gaussxy.fitTo(*data) ;<br><br>RooPlot* framex = x.frame() ;<br>data-&gt;plotOn(framex) ;<br>gaussxy.plotOn(framex) ;<br><br>RooPlot* framey = y.frame() ;<br>data-&gt;plotOn(framey) ;<br>gaussxy.plotOn(framey) ;<br></code></pre></td></tr></table></figure><p>RooProdPdf类能够将任意数量的组件相乘。在此示例中，我们将两个一维p.d.f.相乘，但同样可以组合例如7个一维p.d.f.或2个五维p.d.f.。</p><h4 id="6-4-2-内部实现"><a href="#6-4-2-内部实现" class="headerlink" title="6.4.2 内部实现"></a>6.4.2 内部实现</h4><p>尽管拟合、绘图和事件生成接口与整体p.d.f.的接口看起来相同，但对无相关性p.d.f.的乘积操作，其背后的实现与整体模型存在显著差异。首先，对于正交p.d.f.的乘积，不需要显式计算归一化，因为它们通过构造自然归一化：</p><p>$\int \int C(x, y) , dx y &#x3D; \int \int A(x) B(y)dxdy&#x3D; \int A(x) , dx \cdot \int B(y) , dy &#x3D; 1$</p><p>在绘图中，投影积分可以按照类似的方法简化</p><p>$\int C(x, y) , dy&#x3D;\int A(x) B(y)dy &#x3D; A(x) \cdot \int B(y) , dy &#x3D; A(x)$</p><p>这种简化是通过对输入的RooProdPdf结构进行逻辑推导，而不是通过强制计算实现的。</p><p>事件生成同样利用了因子化的性质。在 C(x, y) 的示例中， x 和 y 的分布可以分别从 A(x) 和 B(y) 独立采样，然后再将结果组合，而不需要对联合分布直接采样。这种方法不仅减少了问题的维度，还允许将观测量的生成委托给组件p.d.f.，而这些组件可能实现了一种比默认的接受&#x2F;拒绝采样更高效的内部生成器。如图24所示，该分布生成过程充分体现了这种优化的优点：通过分解联合分布，可以高效生成所需的多维数据集。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code and Extension</title>
    <link href="/VS_Code_and_extension/"/>
    <url>/VS_Code_and_extension/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/downloadbutton.css"><p><a href="/download/VS_Code_and_extension.pdf" class="download-button">下载文章</a></p><h2 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h2><p>如果你使用的是window系统，自带的cmd终端可能不支持图像传输和显示，你需要下面这个软件或者使用vscode</p><p>MobaXterm程序，这个结合了ssh和x server，是个很方便的应用（甚至有图形化的界面），功能很强大，现只说明如何显示出集群上的图</p><ul><li><p>下载MobaXterm，<br><a href="https://download.mobatek.net/2402024022512842/MobaXterm_Installer_v24.0.zip">https://download.mobatek.net/2402024022512842/MobaXterm_Installer_v24.0.zip</a><br>点击上面的链接，即可下载，按照提示进行安装</p></li><li><p>登录nnu集群<br>双击进入MobaXterm程序，点击star local terminal，你可以试试ssh -XY <a href="mailto:&#122;&#104;&#x75;&#102;&#101;&#110;&#103;&#x40;&#x32;&#50;&#x32;&#46;&#x31;&#x39;&#50;&#46;&#55;&#46;&#x35;&#x31;">&#122;&#104;&#x75;&#102;&#101;&#110;&#103;&#x40;&#x32;&#50;&#x32;&#46;&#x31;&#x39;&#50;&#46;&#55;&#46;&#x35;&#x31;</a>能不能直接登录，按理来说也许能登上去，如果登不上去，可以通过修改.ssh&#x2F;config 。</p></li><li><p>修改ssh配置文件<br>你可能会发现当前路径下没有.ssh&#x2F;这个文件夹，你可以用下面的命令创建一个<br>mkdir .ssh<br>vi .ssh&#x2F;config    创建并修改config文件，输入下面几行</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Host</span> <span class="hljs-number">222.192.7.51</span><br>HostKeyAlgorithms +ssh-rsa<br>ForwardX11 <span class="hljs-literal">yes</span><br>ForwardX11Trusted <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><ul><li>再次ssh -XY <a href="mailto:&#x7a;&#104;&#x75;&#x66;&#x65;&#110;&#103;&#x40;&#50;&#50;&#50;&#46;&#x31;&#57;&#50;&#x2e;&#55;&#x2e;&#53;&#x31;">&#x7a;&#104;&#x75;&#x66;&#x65;&#110;&#103;&#x40;&#50;&#50;&#50;&#46;&#x31;&#57;&#50;&#x2e;&#55;&#x2e;&#53;&#x31;</a> 登录应该就能看到你的文件了，进行课上测试使用 graph-&gt;Draw() 时就能看到图啦！（这个应用甚至在下次能不用你输入密码自动登录）</li></ul><h2 id="X-server-for-Mac"><a href="#X-server-for-Mac" class="headerlink" title="X-server for Mac"></a>X-server for Mac</h2><p>首先下载xquartz，mac用这个链接<a href="https://www.xquartz.org/releases/XQuartz-2.8.5.html">https://www.xquartz.org/releases/XQuartz-2.8.5.html</a> 下载并安装，打开xquartz应用，在自己的终端上用这个命令，你可以把这个命令放在<code>.bashrc</code>中而不用每次都需要使用这个命令<br><code>export DISPLAY=:0</code><br>之后用这个命令登录集群就能看图了（-XY 就是启用x服务器转发）<br><code>ssh -XY uername@server</code></p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>下载<a href="https://code.visualstudio.com/">vscode</a>，打开之后请调至dark模式，because light attracts bugs.<br>如果你英文苦手，请在扩展中搜索简体中文，安装重启之后就能显示中文了。当你使用特定的编程语言的时候，右下角会弹出窗口让你安装对应的插件，以方便你的阅读，当然你也可以直接搜索，比如C++去获取插件。</p><p><img src="/postfigure/VS_Code_and_extension/image-20241016112701291.png" alt="让我们说中文！"><img src="/postfigure/VS_Code_and_extension/image-20241016113449411.png" alt="其他推荐的插件" style="zoom:150%;" /></p><h2 id="在vscode编辑latex"><a href="#在vscode编辑latex" class="headerlink" title="在vscode编辑latex"></a>在vscode编辑latex</h2><p><code>brew install mactex --cask</code> <a href="https://brew.sh/">brew</a>下载mactex<br>打开vscode ，下载插件<br> <img src="/postfigure/VS_Code_and_extension/image-20241015220806138.png" alt="LaTeX"><br>参考专栏：<a href="https://zhuanlan.zhihu.com/p/654720622">https://zhuanlan.zhihu.com/p/654720622</a><br>如果要编译中文需要在开头加UTF8，下面是个例子</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>[UTF8]&#123;ctex&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="在vscode登录lpc，lxplus等"><a href="#在vscode登录lpc，lxplus等" class="headerlink" title="在vscode登录lpc，lxplus等"></a>在vscode登录lpc，lxplus等</h2><p>下载这三个插件</p><p><img src="/postfigure/VS_Code_and_extension/image-20241015221344343.png" alt="image-20241015221344343"></p><p>具体用法看Remote-SSH里面的说明（十分简单易操作)，登录步骤如下</p><p><img src="/postfigure/VS_Code_and_extension/image-20241015214909354.png" alt="登录步骤"></p><p>Tips: 如果你想登录lpc账号请参考这个设置一下.ssh&#x2F;config的配置：<a href="https://uscms.org/uscms_at_work/physics/computing/getstarted/uaf.shtml">https://uscms.org/uscms_at_work/physics/computing/getstarted/uaf.shtml</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> <br>$ <span class="hljs-built_in">ls</span> -a <span class="hljs-comment">#如果你找到了.ssh文件夹就不用重新创建了</span><br>$ <span class="hljs-built_in">mkdir</span> .ssh<br>$ vi .ssh/config<br></code></pre></td></tr></table></figure><p>在<code>.ssh/config</code>中添加下面的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host cmslpc*.fnal.gov<br>    GSSAPIAuthentication <span class="hljs-built_in">yes</span><br>    GSSAPIDelegateCredentials <span class="hljs-built_in">yes</span><br>    StrictHostKeyChecking no<br>    UserKnownHostsFile /dev/null<br></code></pre></td></tr></table></figure><p><a href="https://authentication.fnal.gov/krb5conf/">下载OSX</a>并复制到&#x2F;etc&#x2F;krb5.conf<br>这一步复制需要sudo命令，输入root密码之后才能复制到&#x2F;etc中<br>要先在本地<code>kinit username@FNAL.GOV</code>之后，再在vscode里面登录lpc就可以了</p><h3 id="可能导致连接失败的原因及解决方法："><a href="#可能导致连接失败的原因及解决方法：" class="headerlink" title="可能导致连接失败的原因及解决方法："></a>可能导致连接失败的原因及解决方法：</h3><ul><li>1.99版本更新后会导致ssh连接出现问题（从搜索的<a href="https://github.com/microsoft/vscode/issues/204264">资料</a>来看是老问题），手动回退到<a href="https://code.visualstudio.com/updates/v1_98">上个版本</a>就好了</li><li><img src="/postfigure/VS_Code_and_extension/image-20250417001356380.png" alt="image-20250417001356380" style="zoom:33%;" /></li><li>第一次连接的时候会在服务器的home文件夹下下载一个server，所以你需要保证你的home文件夹下有足够的空间</li></ul><p><img src="/postfigure/VS_Code_and_extension/image-20241015215432720.png" alt="vscode-server"></p><ul><li><p>连接lpc服务器的时候时常会出现问题，主要有以下几种解决方法：</p><ul><li>检查是否<code>kinit username@FNAL.GOV</code>，最好的方法是在终端中先登录到lpc上之后再用vscode登录</li><li>删除<code>.ssh/config</code>中  <code>Host cmslpc-el9.fnal.gov</code>相关的几行，重新在Remote - SSH插件中新建远程(别把之前添加的<code>Host cmslpc*.fnal.gov</code>相关的删掉了)</li><li>检查你的网络和风水</li></ul></li><li><p>重启和重试能解决90%的问题，<code>rm -rf .vscode-server</code>解决100%的问题！</p></li></ul><h2 id="在vscode里编译roofit程序"><a href="#在vscode里编译roofit程序" class="headerlink" title="在vscode里编译roofit程序"></a>在vscode里编译roofit程序</h2><p><code>which root</code>找到root的安装路径，用-l找到链接的路径，一般找到include文件夹就是有包含root所需的头文件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">% <span class="hljs-built_in">which</span> root<br>/opt/homebrew/bin/root<br>% <span class="hljs-built_in">ls</span> -l /opt/homebrew/bin/root<br>/opt/homebrew/bin/root -&gt; ../Cellar/root/6.28.06/bin/root<br>% <span class="hljs-built_in">ls</span> /opt/homebrew/Cellar/root/6.28.06/include/root <br></code></pre></td></tr></table></figure><p>打开你的vscode里面一个工作文件夹下，有一个.vscode&#x2F;c_cpp_properties.json的隐藏文件夹中的配置文件，将你的root路径放进去即可，注意上一行的逗号别忘记加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/opt/homebrew/Cellar/root/6.28.06/include/root&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="GitHub-Copilot-的免费申请及使用"><a href="#GitHub-Copilot-的免费申请及使用" class="headerlink" title="GitHub Copilot 的免费申请及使用"></a>GitHub Copilot 的免费申请及使用</h2><p>参考这个<a href="https://blog.csdn.net/wang1664178416/article/details/138257641">链接</a>进行教育优惠申请，如果你登录上GitHub遇到困难，请申请<a href="https://ikuuu.pw/auth/register?code=ghdW">VPN</a>。</p><blockquote><p>在中国做研究没有VPN还能做什么研究 </p></blockquote><p>当你被批准之后等待几天之后会给你发个邮件，你会发现批准按钮变紫了之后就能去申请Copilot了！</p><p><img src="/postfigure/VS_Code_and_extension/image-20241015222216265.png" alt="提交请求" style="zoom:67%;" /><img src="/postfigure/VS_Code_and_extension/image-20241015222504665.png" alt="获得批准" style="zoom: 67%;" /><img src="/postfigure/VS_Code_and_extension/image-20241015221540461.png" alt="安装插件"></p><p>你可以在ssh服务器中安装插件，这样你在远程作业的时候也能使用Copilot啦！</p><p>Copilot主要有两个功能，你可以像使用ChatGPT一样问这只青蛙（？）任何代码的问题，他还会根据你目前打开的窗口（或者你将文件拖给他）去提出建议；他另外一个强大的功能是根据上下文去猜想你想输入的代码，你只需要按下<code>Tab</code>键就能应用他的建议，或者你使用<code>command + i</code>去让他生成大段代码！</p><p><img src="/postfigure/VS_Code_and_extension/image-20241015223150712.png" alt="like ChatGPT"><img src="/postfigure/VS_Code_and_extension/image-20241015223418714.png" alt="代码填充"></p><p>注：经过某次更新之后Copilot在本地的时候不能正常运行，但在集群中依旧能使用，因为众所周知的原因你需要设置代理服务器。<br>在vscode中按<kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>p</kbd>搜索<code>open user settings json</code>在花括号内添加<code>&quot;http.proxy&quot;: &quot;http://127.0.0.1:7890&quot;,&quot;https.proxy&quot;: &quot;http://127.0.0.1:7890&quot;,</code>（注意逗号，这个地址和端口号会因为你的VPN不同而不同，如果没成功的话，你可能需要搜索一下解决办法）。这样设置后，本地在打开VPN之后就能使用Copilot了！但是这样登录集群之后会发现Copilot又不能使用了，因为这样设置会导致你集群也会走这个代理服务器，很显然集群是不会连通这个地址的。</p><p>你需要类似的在连接到集群之后在vscode中按<kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>p</kbd>搜索<code>open remote settings json</code>在花括号内添加<code>&quot;http.proxy&quot;: &quot;&quot;, &quot;https.proxy&quot;: &quot;&quot;</code>意味着不去用代理服务器，这样就能保证本地和服务器都能使用啦！</p><p>注2:在不明原因的影响下，lpc集群的copilot chat无法登陆，是因为lpc证书会在家目录生成一个证书文件，copilot会读取这个证书并尝试使用他，这显然不是属于他的证书，所以你需要在remote settings json配置中添加<code>&quot;http.proxyStrictSSL&quot;: false, &quot;http.systemCertificates&quot;: false,</code>来忽略这个证书文件</p><p>注3: 在不明原因的影响下，lpc集群无法使用chat，<a href="https://blog.csdn.net/qq_32057921/article/details/145764603#comments_36757995">参考</a>这篇文章设置<br>在Vscode的settings中搜索Extension Kind，找到对应位置并添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;remote.extensionKind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;GitHub.copilot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ui&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>        <br>  <span class="hljs-attr">&quot;GitHub.copilot-chat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ui&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>   <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注4: SignatureVerificationInternal: Signature verification failed with ‘UnknownError’ error.<a href="https://blog.csdn.net/gaogzhen/article/details/129478770">参考</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;extensions.verifySignature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br></code></pre></td></tr></table></figure><hr><h1 id="在VScode中使用overleaf"><a href="#在VScode中使用overleaf" class="headerlink" title="在VScode中使用overleaf"></a>在VScode中使用overleaf</h1><p><img src="/postfigure/VS_Code_and_extension/image-20250417000826131.png" alt="image-20250417000826131"></p><p>下载这个插件，按照里面的说明<a href="https://github.com/iamhyc/Overleaf-Workshop/wiki">GitHub Wiki</a>，获取overleaf的cookie登陆就好了。在VScode里面使用的好处是能使用copilot辅助。</p><p><a href="https://blog.csdn.net/qq_43210428/article/details/121203670">Zotero | 群组Group功能的建立，加入及管理使用（十）_zotero新建群组-CSDN博客</a></p><p><a href="https://zotero-chinese.com/user-guide/sync">数据与文件的同步 | Zotero 中文社区 (zotero-chinese.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/649485162">【工程笔记】搭建Zotero同步服务器 - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/8f773560115e">Zotero使用WebDav配置说明 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/583005093">latex做ppt</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First Step of Linux and Root</title>
    <link href="/rootfirststep/"/>
    <url>/rootfirststep/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/downloadbutton.css"><p><a href="/download/rootfirststep.pdf" class="download-button">下载文章</a></p><h2 id="Lesson-0-install-root-and-software-on-your-compute"><a href="#Lesson-0-install-root-and-software-on-your-compute" class="headerlink" title="Lesson 0 install root and software on your compute"></a>Lesson 0 install root and software on your compute</h2><blockquote><p>If you get the THU’s computer cluster account, use following commands to get into.</p><p><code>$ ssh -XY -p 48571 -o ServerAliveInterval=5  yourname@hepthu.com</code></p><p>You can also run code on your pc if you have installed root, it’s up to you. </p></blockquote><p><a href="https://brew.sh/">homebrew</a> Click this link to go to the Homebrew page, follow the instructions to install Homebrew on your Mac. Homebrew is a software package manager that allows you to download many applications on your Mac!<br>After finishing the installation, paste the following command in a macOS terminal to install CERN ROOT software: <code>$ brew install root</code>. This way, you can also install applications like <code>firefox</code> which you can’t find in the App Store.<br>Additionally, <code>$</code> indicates a shell command, so drop the <code>$</code> sign when you copy the command.</p><h2 id="Lesson-1-base-commands-for-Linux"><a href="#Lesson-1-base-commands-for-Linux" class="headerlink" title="Lesson 1 base commands for Linux"></a>Lesson 1 base commands for Linux</h2><hr><p>Some simple commands you can have a try!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>  <span class="hljs-comment">#print work directory</span><br><span class="hljs-built_in">cd</span> /path/to/directory <span class="hljs-comment">#change directory</span><br><span class="hljs-built_in">cd</span> ..  <span class="hljs-comment">#back to parent directory</span><br><span class="hljs-built_in">ls</span>    <span class="hljs-comment">#list directory contents</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> <span class="hljs-comment">#make a directory</span><br><span class="hljs-built_in">touch</span> test.txt <span class="hljs-comment">#creat a new txt file</span><br><span class="hljs-built_in">cp</span> test.txt copy.txt <span class="hljs-comment">#copy and rename a file</span><br><span class="hljs-built_in">mv</span> copy.txt copy1.txt <span class="hljs-comment">#move and rename a file</span><br><span class="hljs-built_in">rm</span> copy.txt <span class="hljs-comment">#remove</span><br><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">test</span>  <span class="hljs-comment">#delete a directory</span><br>vi filename    <span class="hljs-comment">#open or make a file with vim editor</span><br></code></pre></td></tr></table></figure><p>Vim editor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">i     <span class="hljs-comment">#insert, edit mode</span><br>Esc    <span class="hljs-comment">#exit edit mode</span><br>:wq    <span class="hljs-comment">#save and exit</span><br>:q    <span class="hljs-comment">#exit, will mention you if you have modified the file </span><br>:q!    <span class="hljs-comment">#exit !without! save</span><br></code></pre></td></tr></table></figure><p>you will use the next commands from time to time<br>vi somefile -&gt; press i into edit mode -&gt; do something -&gt;esc exit edit mode -&gt; :wq</p><p>Some tricks that can help you:</p><p>Press the <kbd>TAB</kbd> key to automatically complete some of your commands, such as file names. Pressing it twice will show you the available commands&#x2F;file names you can input.<br>Press <kbd>↑</kbd> to retrieve previous commands.</p><hr><h2 id="Lesson-2-root-基础练习"><a href="#Lesson-2-root-基础练习" class="headerlink" title="Lesson 2 root 基础练习"></a>Lesson 2 root 基础练习</h2><p>进入root环境</p><p><code>$ root</code><br><img src="/postfigure/rootfirststep/image-20241019162558516.png"><br><code>root [0] .q</code> 退出root</p><p>root能输入一句解释一句<br><img src="/postfigure/rootfirststep/image-20241019162809045.png"><br>也可以边解释边执行或者编译后执行一个程序文件，用<code>root yourprogram.C</code></p><p>例如：可以在root中输入下面的程序用来创建一个空白的直方图<br><code>TH1F* graph=new TH1F(&quot;name&quot;,&quot;title&quot;,200,2.97,3.03);</code><br><code>graph-&gt;Draw();</code><br>但一个空白的直方图是很无趣的，你还需要用<code>Fill</code>来填入数据<img src="/postfigure/rootfirststep/image-20241019182124070.png"></p><p>此外我们还能直接创建一个程序文件，以放入更长的程序</p><p>Get start!</p><p><code>$ vi test.C  </code></p><p>&#x2F;&#x2F;push <code> i</code> to enter the insert mode&#x2F;&#x2F;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-comment">//be sure it is similar with your file name</span><br><br> &#123;<br><br>TH1F* graph=new TH1F(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">2.97</span>,<span class="hljs-number">3.03</span>); <br>  <span class="hljs-comment">//TH1F* graph name=new TH1F(&quot;name&quot;,&quot;title”,bins, low, high)</span><br><br>graph-&gt;Draw();  <span class="hljs-comment">//draw your graph </span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;push <code>ESC</code> to end the insert mode&#x2F;&#x2F;</p><p><code>:wq</code>  &#x2F;&#x2F;save and exit </p><p><code>$ root test.C</code>  &#x2F;&#x2F;run your code</p><p><img src="/postfigure/rootfirststepfigure/PastedGraphic1.png"></p><p>&#x2F;&#x2F;&#x2F;successful!&#x2F;&#x2F;&#x2F;</p><p><code>.q  </code>&#x2F;&#x2F;exit the program </p><hr><p>Let’s add something into your graph!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br> <span class="hljs-comment">//TCanvas* c1=new TCanvas(&quot;c1&quot;,&quot;fitting with Gaussian function&quot;);  //if you don’t set the canvas’s name, it will created default canvas with name c1</span><br><br> <span class="hljs-comment">//c1-&gt;SetGrid();  // set grid </span><br><br> TH1F* graph=new TH1F(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">2.97</span>,<span class="hljs-number">3.03</span>);<br><br> graph-&gt;Fill(<span class="hljs-number">2.99</span>); <span class="hljs-comment">// you can add just one data in your graph using “Fill” command and try to draw your graph.It’s boring, right? We need more!</span><br><br> TRandom n; <span class="hljs-comment">// define a random variable n</span><br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;++i)&#123;<br><br> graph-&gt;Fill(n.Gaus(<span class="hljs-number">3</span>,<span class="hljs-number">0.005</span>));  <span class="hljs-comment">//Determine variable n using Gaussian distribution and fill to graph</span><br><br> &#125;<br><br> graph-&gt;Draw();<br><br> graph-&gt;Fit(<span class="hljs-string">&quot;gaus&quot;</span>);<span class="hljs-comment">//fit your graph with Gaussian function</span><br><br> &#125;<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststepfigure/PastedGraphic2.png"></p><p>Wow! now you can use root to do some simple fit works. but we usually use RooFit to do more complex job! So, ready for more programs!</p><p>以上只是一些基础的拟合，很多参数我们并不能自己去定义，没有灵活性，<code>RooFit</code>中则提供了更加专业的拟合函数。</p><h2 id="Lesson-2-Gaussian-fitting-using-RooFit"><a href="#Lesson-2-Gaussian-fitting-using-RooFit" class="headerlink" title="Lesson 2 Gaussian fitting using RooFit"></a>Lesson 2 Gaussian fitting using RooFit</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooAbsReal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooRealVar.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooGaussian.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooChebychev.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooAddPdf.h&quot;</span></span><br><span class="hljs-comment">//#include &quot;RooProdPdf.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooDataSet.h&quot;</span></span><br><span class="hljs-comment">//#include &quot;RooDataHist.h&quot;</span><br><span class="hljs-comment">//#include &quot;RooFitResult.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooPlot.h&quot;</span></span><br><span class="hljs-comment">//#include &quot;RooArgList.h&quot;</span><br><span class="hljs-comment">//#include &quot;RooArgSet.h&quot;</span><br><span class="hljs-comment">//#include &quot;RooRandom.h&quot;</span><br><span class="hljs-comment">//#include &quot;RooPrintable.h&quot;</span><br>using namespace RooFit;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">2.97</span>, <span class="hljs-number">3.03</span>)</span>;<br>    <span class="hljs-comment">// Declares a real-valued variable &#x27;x&#x27; with a range from 2.97 to 3.03.</span><br><br>    RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-string">&quot;mean&quot;</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">2.8</span>, <span class="hljs-number">3.2</span>)</span>;<br>    <span class="hljs-comment">// Declares a real-valued variable &#x27;mean&#x27; with an initial value of 3.0 and a range from 2.8 to 3.2.</span><br><br>    RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>, <span class="hljs-string">&quot;sigma&quot;</span>, <span class="hljs-number">0.003</span>, <span class="hljs-number">0.002</span>, <span class="hljs-number">0.003</span>)</span>;<br>    <span class="hljs-comment">// Declares a real-valued variable &#x27;sigma&#x27; with an initial value of 0.003 and a range from 0.002 to 0.003.</span><br><br>    RooAbsPdf* gaus = new RooGaussian(<span class="hljs-string">&quot;gaus&quot;</span>, <span class="hljs-string">&quot;gaus&quot;</span>, x, mean, sigma);<br>    <span class="hljs-comment">// Creates a Gaussian probability density function (PDF) named &#x27;gaus&#x27; with &#x27;x&#x27; as the observable, &#x27;mean&#x27; as the mean, and &#x27;sigma&#x27; as the standard deviation.</span><br><br>    RooRealVar <span class="hljs-title function_">n</span><span class="hljs-params">(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50000</span>)</span>;<br>    <span class="hljs-comment">// Declares a real-valued variable &#x27;n&#x27; with an initial value of 0 and a range from 0 to 50000.</span><br><br>    RooExtendPdf* <span class="hljs-built_in">exp</span> = new RooExtendPdf(<span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;exp&quot;</span>, *gaus, n);<br>    <span class="hljs-comment">// Creates an extended PDF named &#x27;exp&#x27; that combines the Gaussian PDF &#x27;gaus&#x27; with the variable &#x27;n&#x27;.</span><br><br>    RooAddPdf <span class="hljs-title function_">total</span><span class="hljs-params">(<span class="hljs-string">&quot;total&quot;</span>, <span class="hljs-string">&quot;total&quot;</span>, RooArgList(*<span class="hljs-built_in">exp</span>), RooArgList(n))</span>;<br>    <span class="hljs-comment">// Creates a composite PDF named &#x27;total&#x27; that consists of the extended PDF &#x27;exp&#x27; and the variable &#x27;n&#x27;.</span><br><br>    RooDataSet* data;<br>    <span class="hljs-comment">// Declares a pointer to a RooDataSet object named &#x27;data&#x27;.</span><br><br>    data = gaus-&gt;generate(RooArgSet(x), <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// Generates a dataset &#x27;data&#x27; with 1000 events based on the Gaussian PDF &#x27;gaus&#x27; and the observable &#x27;x&#x27;.</span><br><br>    RooFitResult* result = total.fitTo(*data, Save());<br>    <span class="hljs-comment">// Fits the composite PDF &#x27;total&#x27; to the dataset &#x27;data&#x27; and saves the fit result in &#x27;result&#x27;.</span><br><br>    TCanvas* c1 = new TCanvas(<span class="hljs-string">&quot;c1&quot;</span>, <span class="hljs-string">&quot;fitting with Gaussian function&quot;</span>);<br>    <span class="hljs-comment">// Creates a new canvas named &#x27;c1&#x27; with the title &quot;fitting with Gaussian function&quot; for plotting.</span><br><br>    RooPlot* xframe = x.frame(RooFit::Title(<span class="hljs-string">&quot;Fit GausX&quot;</span>));<br>    <span class="hljs-comment">// Creates a frame for the observable &#x27;x&#x27; with the title &quot;Fit GausX&quot;.</span><br><br>    data-&gt;plotOn(xframe);<br>    <span class="hljs-comment">// Plots the dataset &#x27;data&#x27; on the frame &#x27;xframe&#x27;.</span><br><br>    total.plotOn(xframe);<br>    <span class="hljs-comment">// Plots the composite PDF &#x27;total&#x27; on the frame &#x27;xframe&#x27;.</span><br><br>    xframe-&gt;Draw();<br>    <span class="hljs-comment">// Draws the frame &#x27;xframe&#x27; on the canvas.</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststepfigure/PastedGraphic3.png"></p><hr><p>一个函数看起来有些孤单，我们可以用<code>RooAddPdf</code>这个函数把两个函数放在一起</p><p>RooRealVar fsig(“fsig”,”fsig”,0.2,0,1.);</p><p>&#x2F;&#x2F;model(x) &#x3D; fsig*gaus(x) + (1-fsig)*chev(x)</p><p>RooAddPdf model(“fsig”,”fsig”,RooArgList(gaus,chev),fsig);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>using namespace RooFit;<br><span class="hljs-comment">//build gaussian and shev pdf</span><br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">2.97</span>,<span class="hljs-number">3.03</span>)</span>;<br>RooRealVar <span class="hljs-title function_">mean</span><span class="hljs-params">(<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-string">&quot;mean&quot;</span>,<span class="hljs-number">3.0</span>,<span class="hljs-number">2.8</span>,<span class="hljs-number">3.2</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigma</span><span class="hljs-params">(<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-string">&quot;sigma&quot;</span>,<span class="hljs-number">0.005</span>,<span class="hljs-number">0.003</span>,<span class="hljs-number">0.007</span>)</span>;<br>RooRealVar <span class="hljs-title function_">a0</span><span class="hljs-params">(<span class="hljs-string">&quot;a0&quot;</span>,<span class="hljs-string">&quot;a0&quot;</span>,<span class="hljs-number">0.005</span>,<span class="hljs-number">0.004</span>,<span class="hljs-number">0.006</span>)</span>;<br>RooAbsPdf* gaus=new RooGaussian(<span class="hljs-string">&quot;gaus&quot;</span>,<span class="hljs-string">&quot;gaus&quot;</span>,x,mean,sigma);<br>RooAbsPdf* shev=new RooChebychev(<span class="hljs-string">&quot;shev&quot;</span>,<span class="hljs-string">&quot;shev&quot;</span>,x,a0);<br>RooRealVar <span class="hljs-title function_">n1</span><span class="hljs-params">(<span class="hljs-string">&quot;n1&quot;</span>,<span class="hljs-string">&quot;n1&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n2</span><span class="hljs-params">(<span class="hljs-string">&quot;n2&quot;</span>,<span class="hljs-string">&quot;n2&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooExtendPdf*signal1=new RooExtendPdf(<span class="hljs-string">&quot;sig1&quot;</span>,<span class="hljs-string">&quot;sig1&quot;</span>,*gaus,n1);<br>RooExtendPdf*signal2=new RooExtendPdf(<span class="hljs-string">&quot;sig2&quot;</span>,<span class="hljs-string">&quot;sig2&quot;</span>,*shev,n2);<br>RooAddPdf <span class="hljs-title function_">totalPdf</span><span class="hljs-params">(<span class="hljs-string">&quot;total&quot;</span>,<span class="hljs-string">&quot;total&quot;</span>,RooArgList(*signal1,*signal2),RooArgList(n1,n2))</span>;<span class="hljs-comment">//totalPdf(x)=signal1(x)+signal2(x)</span><br><br><span class="hljs-comment">//generate data point</span><br>RooDataSet*data1;<br>RooDataSet*data2;<br>data1=gaus-&gt;generate(RooArgSet(x),<span class="hljs-number">1000</span>);<br>data2=shev-&gt;generate(RooArgSet(x),<span class="hljs-number">1000</span>);<br>data1-&gt;append(*data2);<br><br><span class="hljs-comment">//fit</span><br>RooFitResult*result= totalPdf.fitTo(*data1,Save());<br>RooPlot*xframe=x.frame();<br>data1-&gt;plotOn(xframe);<br>totalPdf.plotOn(xframe);<br>totalPdf.plotOn(xframe, Components(*signal1),LineStyle(kDashed),LineColor(<span class="hljs-number">6</span>));<br>totalPdf.plotOn(xframe, Components(<span class="hljs-string">&quot;sig2&quot;</span>),LineStyle(kDashed),LineColor(<span class="hljs-number">2</span>));<span class="hljs-comment">//two different ways set the Components name</span><br>xframe-&gt;Draw();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststep/image-20241019160239218.png" alt="显示拟合函数的各组分"></p><blockquote><p>以上是一维拟合，但很多时候我们会研究两个不同组分，这样就需要进行二维拟合。二维拟合就不单单是把两个PDF加和在一起了，而是需要乘积，可以理解为同时出现两个组分的概率。举例来说，对于x事件，他有发生和不发生两个概率设为p(x) q(x)，对于y事件同样的p(y) q(y)，那么对于所有的事件就有四种情况，这四种情况的概率相对应的就是p(x)*p(y) 是x，y同时发生的概率，其他的相同。所以我们需要构建四个概率函数来表示对于这两个事件不同组合的各种情况出现的概率。</p></blockquote><hr><p>Note: 默认的随机生成的种子号是<code>0</code>，一般会根据时间设置种子号，这样每次生成都是不一样的，但是这里可能是为了调试的方便，让种子号为<code>0</code>时是一个确定的值，所以如果你的程序跟我一样的话生成的数据也是一模一样的，并不是那么随机。你可以<code>RooRandom::randomGenerator()-&gt;SetSeed(seed)</code>来自定义种子号，还有另外一种方式<code>gRandom-&gt;SetSeed(seed)</code>，前者是对RooFit中的随机数生成器进行设置，RooFit中的一些需要随机数的函数都会依赖这个值，后者是面向ROOT的全局随机数生成器，当除RooFit之外的其他库中也需要随机数生成的时候，会依赖这个seed。简单来说，后者可以包含前者，你可以使用<code>gRandom-&gt;GetSeed()</code>去查看当前的seed。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roofit">TDatime* starttime=new TDatime();<br>Int_t today=starttime-&gt;GetDate();<br>Int_t clock=starttime-&gt;GetTime();<br>Int_t seed=today+clock;<br>RooRandom::randomGenerator()-&gt;SetSeed(seed);<br></code></pre></td></tr></table></figure><h2 id="Lesson-3-2D-fitting"><a href="#Lesson-3-2D-fitting" class="headerlink" title="Lesson 3 2D fitting"></a>Lesson 3 2D fitting</h2><p>下面展示了两个二维拟合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TH2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TStyle.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TCanvas.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TF1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TText.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TLorentzVector.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TVector3.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TLorentzRotation.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooNumIntConfig.h&quot;</span> <span class="hljs-comment">//no matter what, copy directly!</span></span><br><br>using namespace RooFit;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//build gaussian pdf in two dimension</span><br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>)</span>;<br>  <br>RooRealVar <span class="hljs-title function_">meanx</span><span class="hljs-params">(<span class="hljs-string">&quot;meanx&quot;</span>,<span class="hljs-string">&quot;meanx&quot;</span>,<span class="hljs-number">3.0967</span>,<span class="hljs-number">2.9</span>,<span class="hljs-number">3.2</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmax</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmax&quot;</span>,<span class="hljs-string">&quot;sigmax&quot;</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.06</span>)</span>;<br>RooAbsPdf* gausx=new RooGaussian(<span class="hljs-string">&quot;gausx&quot;</span>,<span class="hljs-string">&quot;gausx&quot;</span>,x,meanx,sigmax);<br><br>RooRealVar <span class="hljs-title function_">ax0</span><span class="hljs-params">(<span class="hljs-string">&quot;ax0&quot;</span>,<span class="hljs-string">&quot;ax0&quot;</span>,<span class="hljs-number">0.005</span>,<span class="hljs-number">0.004</span>,<span class="hljs-number">0.006</span>)</span>;<br>RooRealVar <span class="hljs-title function_">ax1</span><span class="hljs-params">(<span class="hljs-string">&quot;ax1&quot;</span>,<span class="hljs-string">&quot;ax1&quot;</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.02</span>)</span>;<br>RooAbsPdf* shevx=new RooChebychev(<span class="hljs-string">&quot;shevx&quot;</span>,<span class="hljs-string">&quot;shevx&quot;</span>,x,RooArgSet(ax0,ax1)); <br><br>RooRealVar <span class="hljs-title function_">y</span><span class="hljs-params">(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>)</span>;<br>  <br>RooRealVar <span class="hljs-title function_">meany</span><span class="hljs-params">(<span class="hljs-string">&quot;meany&quot;</span>,<span class="hljs-string">&quot;meany&quot;</span>,<span class="hljs-number">3.0967</span>,<span class="hljs-number">2.9</span>,<span class="hljs-number">3.2</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmay</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmay&quot;</span>,<span class="hljs-string">&quot;sigmay&quot;</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.06</span>)</span>;<br>RooAbsPdf* gausy=new RooGaussian(<span class="hljs-string">&quot;gausy&quot;</span>,<span class="hljs-string">&quot;gausy&quot;</span>,y,meany,sigmay);<br>  <br>RooRealVar <span class="hljs-title function_">ay0</span><span class="hljs-params">(<span class="hljs-string">&quot;ay0&quot;</span>,<span class="hljs-string">&quot;ay0&quot;</span>,<span class="hljs-number">0.005</span>,<span class="hljs-number">0.004</span>,<span class="hljs-number">0.006</span>)</span>;<br>RooRealVar <span class="hljs-title function_">ay1</span><span class="hljs-params">(<span class="hljs-string">&quot;ay1&quot;</span>,<span class="hljs-string">&quot;ay1&quot;</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.02</span>)</span>;<br>RooAbsPdf* shevy=new RooChebychev(<span class="hljs-string">&quot;shevy&quot;</span>,<span class="hljs-string">&quot;shevy&quot;</span>,y,RooArgSet(ay0,ay1));<br><br><span class="hljs-comment">//constructor with 2 pdf</span><br>RooProdPdf* sigxsigy=new RooProdPdf(<span class="hljs-string">&quot;sigxsigy&quot;</span>,<span class="hljs-string">&quot;sigxsigy&quot;</span>,*gausx,*gausy);<br>RooProdPdf* bkgxsigy=new RooProdPdf(<span class="hljs-string">&quot;bkgxsigy&quot;</span>,<span class="hljs-string">&quot;bkgxsigy&quot;</span>,*shevx,*gausy);<br>RooProdPdf* sigxbkgy=new RooProdPdf(<span class="hljs-string">&quot;sigxbkgy&quot;</span>,<span class="hljs-string">&quot;sigxbkgy&quot;</span>,*gausx,*shevy);<br>RooProdPdf* bkgxbkgy=new RooProdPdf(<span class="hljs-string">&quot;bkgxbkgy&quot;</span>,<span class="hljs-string">&quot;bkgxbkgy&quot;</span>,*shevx,*shevy);<br><br>RooRealVar <span class="hljs-title function_">n_sigxsigy</span><span class="hljs-params">(<span class="hljs-string">&quot;n_sigxsigy&quot;</span>,<span class="hljs-string">&quot;n_sigxsigy&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n_bkgxsigy</span><span class="hljs-params">(<span class="hljs-string">&quot;n_bkgxsigy&quot;</span>,<span class="hljs-string">&quot;n_bkgxsigy&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n_sigxbkgy</span><span class="hljs-params">(<span class="hljs-string">&quot;n_sigxbkgy&quot;</span>,<span class="hljs-string">&quot;n_sigxbkgy&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n_bkgxbkgy</span><span class="hljs-params">(<span class="hljs-string">&quot;n_bkgxbkgy&quot;</span>,<span class="hljs-string">&quot;n_bkgxbkgy&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br><br><br>RooExtendPdf*signal1=new RooExtendPdf(<span class="hljs-string">&quot;signal1&quot;</span>,<span class="hljs-string">&quot;signal1&quot;</span>,*sigxsigy,n_sigxsigy);<br>RooExtendPdf*signal2=new RooExtendPdf(<span class="hljs-string">&quot;signal2&quot;</span>,<span class="hljs-string">&quot;signal2&quot;</span>,*sigxbkgy,n_sigxbkgy);<br>RooExtendPdf*signal3=new RooExtendPdf(<span class="hljs-string">&quot;signal3&quot;</span>,<span class="hljs-string">&quot;signal3&quot;</span>,*bkgxsigy,n_bkgxsigy);<br>RooExtendPdf*signal4=new RooExtendPdf(<span class="hljs-string">&quot;signal4&quot;</span>,<span class="hljs-string">&quot;signal4&quot;</span>,*bkgxbkgy,n_bkgxbkgy);<br><br>RooAddPdf <span class="hljs-title function_">totalPdf</span><span class="hljs-params">(<span class="hljs-string">&quot;total&quot;</span>,<span class="hljs-string">&quot;total&quot;</span>,RooArgList(*signal1,*signal2,*signal3,*signal4),RooArgList(n_sigxsigy,n_sigxbkgy,n_bkgxsigy,n_bkgxbkgy))</span>;<br><br><span class="hljs-comment">//generate data point</span><br><br>RooDataSet*data1;<br>RooDataSet*data2;<br>RooDataSet*data3;<br>RooDataSet*data4;<br>data1=sigxsigy-&gt;generate(RooArgSet(x,y),<span class="hljs-number">1000</span>);<br>data2=sigxbkgy-&gt;generate(RooArgSet(x,y),<span class="hljs-number">2000</span>);<br>data3=bkgxsigy-&gt;generate(RooArgSet(x,y),<span class="hljs-number">2000</span>);<br>data4=bkgxbkgy-&gt;generate(RooArgSet(x,y),<span class="hljs-number">4000</span>);<br><br>data1-&gt;append(*data2);<br>data1-&gt;append(*data3);<br>data1-&gt;append(*data4);<br><br><span class="hljs-comment">//fit</span><br>RooFitResult*result= totalPdf.fitTo(*data1,Save());<br><span class="hljs-comment">//x dimension</span><br><br><span class="hljs-comment">//create two canvases, because you have to know two dimensions fitting.</span><br>TCanvas*c1 =new TCanvas(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;Fitting X&quot;</span>);<br>c1-&gt;cd();<br>RooPlot*xframe=x.frame(RooFit::Title(<span class="hljs-string">&quot;Fit GausX&quot;</span>));<br>data1-&gt;plotOn(xframe);<br>totalPdf.plotOn(xframe,Name(<span class="hljs-string">&quot;fullModel&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*signal1),LineColor(<span class="hljs-number">2</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*signal2),LineColor(<span class="hljs-number">6</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;BkgJpsi&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*signal3),LineColor(<span class="hljs-number">7</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiBkg&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*signal4),LineColor(<span class="hljs-number">8</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;BkgBkg&quot;</span>));<br><br>TLegend <span class="hljs-title function_">leg</span><span class="hljs-params">(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>)</span>;<br>leg.AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;fullModel&quot;</span>), <span class="hljs-string">&quot;Full Model&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg.AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg.AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;BkgJpsi&quot;</span>), <span class="hljs-string">&quot;Bkg_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg.AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;JpsiBkg&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;Bkg_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg.AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;BkgBkg&quot;</span>), <span class="hljs-string">&quot;Bkg_&#123;#mu1#mu2&#125;Bkg_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br><br>xframe-&gt;Draw();<br>leg.DrawClone();<br><br><span class="hljs-comment">//y dimension</span><br>TCanvas*c2 =new TCanvas(<span class="hljs-string">&quot;c2&quot;</span>,<span class="hljs-string">&quot;Fitting Y&quot;</span>);<br>c2-&gt;cd();<br>RooPlot*yframe=y.frame(RooFit::Title(<span class="hljs-string">&quot;Fit GausY&quot;</span>));<br>data1-&gt;plotOn(yframe);<br>totalPdf.plotOn(yframe);<br>totalPdf.plotOn(yframe,Name(<span class="hljs-string">&quot;fullModel&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*signal1),LineColor(<span class="hljs-number">2</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*signal2),LineColor(<span class="hljs-number">6</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;BkgJpsi&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*signal3),LineColor(<span class="hljs-number">7</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiBkg&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*signal4),LineColor(<span class="hljs-number">8</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;BkgBkg&quot;</span>));<br><br>TLegend <span class="hljs-title function_">leg2</span><span class="hljs-params">(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>)</span>;<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;fullModel&quot;</span>), <span class="hljs-string">&quot;Full Model&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;BkgJpsi&quot;</span>), <span class="hljs-string">&quot;Bkg_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;JpsiBkg&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;Bkg_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;BkgBkg&quot;</span>), <span class="hljs-string">&quot;Bkg_&#123;#mu1#mu2&#125;Bkg_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br><br>yframe-&gt;Draw();<br>leg2.DrawClone();<br><br>TCanvas*c3 =new TCanvas(<span class="hljs-string">&quot;c3&quot;</span>,<span class="hljs-string">&quot;2D plot&quot;</span>);<br>c3-&gt;cd();<br>TH2F* mytwojpsimass = new TH2F(<span class="hljs-string">&quot;mytwojpsimass&quot;</span>,<span class="hljs-string">&quot;mytwojpsimass&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">3.5</span>);<br>data1-&gt;fillHistogram(mytwojpsimass,RooArgList(x,y));<br>mytwojpsimass-&gt;Draw(<span class="hljs-string">&quot;colz&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststep/image-20241019195317859.png" alt="fit_xy"><img src="/postfigure/rootfirststep/image-20241019195342006.png" alt="二维密度图"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TH2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TStyle.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TCanvas.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TF1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TText.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TLorentzVector.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TVector3.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TLorentzRotation.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RooNumIntConfig.h&quot;</span> <span class="hljs-comment">//no matter what, copy directly!</span></span><br>using namespace RooFit;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//build gaussian pdf in two dimension</span><br>RooRealVar <span class="hljs-title function_">x</span><span class="hljs-params">(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>)</span>;<br>RooRealVar <span class="hljs-title function_">meanx1</span><span class="hljs-params">(<span class="hljs-string">&quot;meanx1&quot;</span>,<span class="hljs-string">&quot;meanx1&quot;</span>,<span class="hljs-number">3.0967</span>,<span class="hljs-number">2.9</span>,<span class="hljs-number">3.2</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmax1</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmax1&quot;</span>,<span class="hljs-string">&quot;sigmax1&quot;</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.06</span>)</span>;<br>RooAbsPdf* gausx1=new RooGaussian(<span class="hljs-string">&quot;gausx1&quot;</span>,<span class="hljs-string">&quot;gausx1&quot;</span>,x,meanx1,sigmax1);<br><br>RooRealVar <span class="hljs-title function_">meanx2</span><span class="hljs-params">(<span class="hljs-string">&quot;meanx2&quot;</span>,<span class="hljs-string">&quot;meanx2&quot;</span>,<span class="hljs-number">3.686</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">3.8</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmax2</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmax2&quot;</span>,<span class="hljs-string">&quot;sigmax2&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.2</span>)</span>;<br>RooAbsPdf* gausx2=new RooGaussian(<span class="hljs-string">&quot;gausx2&quot;</span>,<span class="hljs-string">&quot;gausx2&quot;</span>,x,meanx2,sigmax2);<br><br>RooRealVar <span class="hljs-title function_">y</span><span class="hljs-params">(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>)</span>;<br>  <br>RooRealVar <span class="hljs-title function_">meany1</span><span class="hljs-params">(<span class="hljs-string">&quot;meany1&quot;</span>,<span class="hljs-string">&quot;meany1&quot;</span>,<span class="hljs-number">3.0967</span>,<span class="hljs-number">2.9</span>,<span class="hljs-number">3.2</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmay1</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmay1&quot;</span>,<span class="hljs-string">&quot;sigmay1&quot;</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.06</span>)</span>;<br>RooAbsPdf* gausy1=new RooGaussian(<span class="hljs-string">&quot;gausy1&quot;</span>,<span class="hljs-string">&quot;gausy1&quot;</span>,y,meany1,sigmay1);<br>  <br>RooRealVar <span class="hljs-title function_">meany2</span><span class="hljs-params">(<span class="hljs-string">&quot;meany2&quot;</span>,<span class="hljs-string">&quot;meany2&quot;</span>,<span class="hljs-number">3.686</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">3.8</span>)</span>;<br>RooRealVar <span class="hljs-title function_">sigmay2</span><span class="hljs-params">(<span class="hljs-string">&quot;sigmay2&quot;</span>,<span class="hljs-string">&quot;sigmay2&quot;</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0.01</span>,<span class="hljs-number">0.2</span>)</span>;<br>RooAbsPdf* gausy2=new RooGaussian(<span class="hljs-string">&quot;gausy2&quot;</span>,<span class="hljs-string">&quot;gausy2&quot;</span>,y,meany2,sigmay2);<br><br><span class="hljs-comment">//constructor with 2 pdf</span><br>RooProdPdf* gausx1y1=new RooProdPdf(<span class="hljs-string">&quot;gausx1y1&quot;</span>,<span class="hljs-string">&quot;gausx1y1&quot;</span>,*gausx1,*gausy1);<br>RooProdPdf* gausx1y2=new RooProdPdf(<span class="hljs-string">&quot;gausx1y2&quot;</span>,<span class="hljs-string">&quot;gausx1y2&quot;</span>,*gausx1,*gausy2);<br>RooProdPdf* gausx2y1=new RooProdPdf(<span class="hljs-string">&quot;gausx2y1&quot;</span>,<span class="hljs-string">&quot;gausx2y1&quot;</span>,*gausx2,*gausy1);<br><br>RooRealVar <span class="hljs-title function_">n_x1y1</span><span class="hljs-params">(<span class="hljs-string">&quot;n1&quot;</span>,<span class="hljs-string">&quot;n1&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n_x1y2</span><span class="hljs-params">(<span class="hljs-string">&quot;n2&quot;</span>,<span class="hljs-string">&quot;n2&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br>RooRealVar <span class="hljs-title function_">n_x2y1</span><span class="hljs-params">(<span class="hljs-string">&quot;n3&quot;</span>,<span class="hljs-string">&quot;n3&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>)</span>;<br><br>RooAddPdf <span class="hljs-title function_">totalPdf</span><span class="hljs-params">(<span class="hljs-string">&quot;total&quot;</span>,<span class="hljs-string">&quot;total&quot;</span>,RooArgList(*gausx1y1,*gausx1y2,*gausx2y1),RooArgList(n_x1y1,n_x1y2,n_x2y1))</span>;<br><br><span class="hljs-comment">//generate data point</span><br><br>RooDataSet*data1;<br>RooDataSet*data2;<br>RooDataSet*data3;<br>data1=gausx1y1-&gt;generate(RooArgSet(x,y),<span class="hljs-number">1000</span>);<br>data2=gausx1y2-&gt;generate(RooArgSet(x,y),<span class="hljs-number">1000</span>);<br>data3=gausx2y1-&gt;generate(RooArgSet(x,y),<span class="hljs-number">1000</span>);<br><br>data1-&gt;append(*data2);<br>data1-&gt;append(*data3);<br><br><span class="hljs-comment">//fit</span><br>RooFitResult*result= totalPdf.fitTo(*data1,Save());<br><span class="hljs-comment">//x dimension</span><br><span class="hljs-comment">//create two canvases, because you have to know two dimensions fitting.</span><br>TCanvas*c1 =new TCanvas(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;Fitting X&quot;</span>);<br>c1-&gt;cd();<br>RooPlot*xframe=x.frame(RooFit::Title(<span class="hljs-string">&quot;Fit GausX&quot;</span>));<br>data1-&gt;plotOn(xframe,Name(<span class="hljs-string">&quot;data1&quot;</span>));<br>totalPdf.plotOn(xframe,Name(<span class="hljs-string">&quot;fullModel&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*gausx1y1),LineColor(<span class="hljs-number">2</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*gausx1y2),LineColor(<span class="hljs-number">6</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiPsi2S&quot;</span>));<br>totalPdf.plotOn(xframe,Components(*gausx2y1),LineColor(<span class="hljs-number">7</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;Psi2SJpsi&quot;</span>));<br><br>TLegend* leg= new TLegend(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>);<br>leg-&gt;AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;data1&quot;</span>), <span class="hljs-string">&quot;Data&quot;</span>, <span class="hljs-string">&quot;pe&quot;</span>);<br>leg-&gt;AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;fullModel&quot;</span>), <span class="hljs-string">&quot;Total Fit&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg-&gt;AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg-&gt;AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;JpsiPsi2S&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;#psi(2S)_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg-&gt;AddEntry(xframe-&gt;findObject(<span class="hljs-string">&quot;Psi2SJpsi&quot;</span>), <span class="hljs-string">&quot;#psi(2S)_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br><br>xframe-&gt;Draw();<br>leg-&gt;Draw();<br><br><br><br><span class="hljs-comment">//y dimension</span><br>TCanvas*c2 =new TCanvas(<span class="hljs-string">&quot;c2&quot;</span>,<span class="hljs-string">&quot;Fitting Y&quot;</span>);<br>c2-&gt;cd();<br>RooPlot*yframe=y.frame(RooFit::Title(<span class="hljs-string">&quot;Fit GausY&quot;</span>));<br>data1-&gt;plotOn(yframe,Name(<span class="hljs-string">&quot;data1&quot;</span>));<br>totalPdf.plotOn(yframe,Name(<span class="hljs-string">&quot;fullModel&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*gausx1y1),LineColor(<span class="hljs-number">2</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*gausx1y2),LineColor(<span class="hljs-number">6</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;JpsiPsi2S&quot;</span>));<br>totalPdf.plotOn(yframe,Components(*gausx2y1),LineColor(<span class="hljs-number">7</span>),LineStyle(<span class="hljs-number">1</span>),Name(<span class="hljs-string">&quot;Psi2SJpsi&quot;</span>));<br><br><br>TLegend <span class="hljs-title function_">leg2</span><span class="hljs-params">(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>)</span>;<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;data1&quot;</span>), <span class="hljs-string">&quot;Data&quot;</span>, <span class="hljs-string">&quot;pe&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;fullModel&quot;</span>), <span class="hljs-string">&quot;Total Fit&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;JpsiJpsi&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;JpsiPsi2S&quot;</span>), <span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;#psi(2S)_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br>leg2.AddEntry(yframe-&gt;findObject(<span class="hljs-string">&quot;Psi2SJpsi&quot;</span>), <span class="hljs-string">&quot;#psi(2S)_&#123;#mu1#mu2&#125;J/#psi_&#123;#mu3#mu4&#125;&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>);<br><br>yframe-&gt;Draw();<br>leg2.DrawClone();<br><br>TCanvas*c3 =new TCanvas(<span class="hljs-string">&quot;c3&quot;</span>,<span class="hljs-string">&quot;2D plot&quot;</span>);<br>c3-&gt;cd();<br>TH2F* mytwojpsimass = new TH2F(<span class="hljs-string">&quot;mytwojpsimass&quot;</span>,<span class="hljs-string">&quot;mytwojpsimass&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2.7</span>,<span class="hljs-number">4</span>);<br>data1-&gt;fillHistogram(mytwojpsimass,RooArgList(x,y));<br>mytwojpsimass-&gt;Draw(<span class="hljs-string">&quot;colz&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststep/image-20241019201449015.png" alt="J\psi 和 \psi(2S)的二维拟合"></p><h2 id="Lesson-3-Pull-Plot"><a href="#Lesson-3-Pull-Plot" class="headerlink" title="Lesson 3+ Pull Plot"></a>Lesson 3+ Pull Plot</h2><p>当我们想看拟合曲线和数据点之间拟合是否拟合得很好的话，就需要看pull分布，就相当于将拟合曲线拉直看数据点相对于曲线的距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C">RooPlot *xfpull=x.frame(RooFit::Title(<span class="hljs-string">&quot;    &quot;</span>));<span class="hljs-comment">//创建 RooPlot 对象 xfpull，用于绘制 x 维度的 pull 分布图</span><br>RooHist *pullx=xframe-&gt;pullHist(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;all&quot;</span>); <span class="hljs-comment">//从 xframe 中获取数据和模型的 pull 分布，并将其添加到 xfpull 中，这里要对应你在xframe画的对象的Name()，比如totalPdf.plotOn(xframe,Name(&quot;fullModel&quot;));你的pullHist()里面就应该是&quot;fullModel&quot;</span><br>xfpull-&gt;addPlotable(pullx,<span class="hljs-string">&quot;p&quot;</span>);<br>xfpull-&gt;GetXaxis()-&gt;SetTitle(<span class="hljs-string">&quot;J/#psi_&#123;#mu1#mu2&#125;&quot;</span>);<br>xfpull-&gt;GetXaxis()-&gt;SetTitleSize(<span class="hljs-number">0.15</span>);<br>xfpull-&gt;GetXaxis()-&gt;SetLabelSize(<span class="hljs-number">0.12</span>);<br>xfpull-&gt;GetYaxis()-&gt;SetTitle(<span class="hljs-string">&quot;Pull&quot;</span>);<br>xfpull-&gt;GetYaxis()-&gt;SetTitleSize(<span class="hljs-number">0.15</span>);<br>xfpull-&gt;GetYaxis()-&gt;SetLabelSize(<span class="hljs-number">0.1</span>);<br>xfpull-&gt;GetYaxis()-&gt;SetTitleOffset(<span class="hljs-number">0.2</span>);<br><br><span class="hljs-comment">//在画布 c2 上创建两个子画布 pad21 和 pad22，分别用于绘制拟合结果和 pull 分布图。</span><br><span class="hljs-comment">//在 pad11 上绘制 y 维度的拟合结果 xframe 和图例 leg，TPad的位置和TLegend的类似，都是相对于TCanvas的位置关系</span><br>TCanvas <span class="hljs-title function_">c1</span><span class="hljs-params">(<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>)</span>;<br>c1.cd();<br>TPad <span class="hljs-title function_">pad11</span><span class="hljs-params">(<span class="hljs-string">&quot;pad11&quot;</span>,<span class="hljs-string">&quot;pad11&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1.0</span>)</span>;<br>pad11.SetTopMargin(<span class="hljs-number">0.08</span>);<br>pad11.SetBottomMargin(<span class="hljs-number">0.005</span>);<br>pad11.Draw();<br>pad11.cd();<br>xframe-&gt;Draw();<br>leg.Draw();<br><span class="hljs-comment">//在 pad12 上绘制 y 维度的 pull 分布图 yfpull</span><br>c1.cd();<br>TPad <span class="hljs-title function_">pad12</span><span class="hljs-params">(<span class="hljs-string">&quot;pad12&quot;</span>,<span class="hljs-string">&quot;pad12&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.3</span>)</span>;<br>pad12.SetTopMargin(<span class="hljs-number">0.005</span>);<br>pad12.SetBottomMargin(<span class="hljs-number">0.4</span>);<br>pad12.SetGridx();<br>pad12.SetGridy(<span class="hljs-number">2</span>);<br>pad12.Draw();<br>pad12.cd();<br>xfpull-&gt;Draw();<br><br>c1.Update();<br>c1.SaveAs(<span class="hljs-string">&quot;c1.pdf&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/postfigure/rootfirststep/image-20241225131754804.png" alt="pullX" style="zoom:50%;" /><img src="/postfigure/rootfirststep/image-20241225131822621.png" alt="pullY" style="zoom:50%;" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ebook</title>
    <link href="/ebookdownload/"/>
    <url>/ebookdownload/</url>
    
    <content type="html"><![CDATA[<style>  .ebook-cover {    position: relative;  }  .ebook-container {    display: inline-block;    text-align: center;    margin-bottom: 20px;    margin-right: 10px;    margin-left: 10px;    width: 200px;  }  .ebook-title {    display: block;    margin-top: 10px;    font-size: 14px;    word-wrap: break-word;    max-width: 200px;    text-align: center;  }</style><div id="ebook-list"></div><script>  const ebooks = {    "new_Instruction_for_CERN_account": "New Instruction for CERN Account",    "鸟哥的Linux私房菜基础学习篇第四版": "鸟哥的Linux私房菜基础学习篇·第四版",    "Introductiontoelementaryparticles": "Introduction to Elementary Particles",    "Statistical_Methods_in_Experimental_Physics": "Statistical Methods in Experimental Physics",    "实验物理中的概率和统计_朱永生著": "实验物理中的概率和统计 朱永生著",    "北京谱仪正负电子物理": "北京谱仪正负电子物理 郑志鹏,朱永生主编",    //"高能物理数据分析": "高能物理数据分析 统计方法使用指南 O·贝恩克 K·克朗格宁 G·肖特 T·肖纳-赛德涅斯 -  (2019, 中国科学技术大学出版社)"    //pdf/封面文件名:书名（用于显示的名称）  };  const ebookList = document.getElementById('ebook-list');  for (const [fileName, displayName] of Object.entries(ebooks)) {    const ebookContainer = document.createElement('div');    ebookContainer.className = 'ebook-container';    const ebookLink = document.createElement('a');    ebookLink.href = `/download/${fileName}.pdf`;        const ebookImage = document.createElement('img');    ebookImage.className = 'ebook-cover';    ebookImage.src = `/postfigure/ebook/${fileName}.jpg`;    ebookImage.alt = displayName;    ebookImage.width = 200;    ebookImage.height = 300;        const ebookTitle = document.createElement('span');    ebookTitle.className = 'ebook-title';    ebookTitle.textContent = displayName;        ebookLink.appendChild(ebookImage);    ebookContainer.appendChild(ebookLink);    ebookContainer.appendChild(ebookTitle);    ebookList.appendChild(ebookContainer);  }</script>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🔒 Multilep learning note</title>
    <link href="/multilepnote/"/>
    <url>/multilepnote/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="正在启动自毁程序…… 3，2……1" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7b726fce634427d1e33b0d93f9a380e800f1969d1cc9b8957f9fd821dba08f70"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入指令。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>multilep</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux learning note</title>
    <link href="/linux/"/>
    <url>/linux/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/downloadbutton.css"><p><a href="/download/linux.pdf" class="download-button">下载文章</a></p><blockquote><p><a href="https://www.runoob.com/linux/linux-file-content-manage.html">Linux | 菜鸟教程 (runoob.com)</a> 推荐这个作为入门</p><p>linux命令行与shell脚本编程大全</p></blockquote><h1 id="linux-基础"><a href="#linux-基础" class="headerlink" title="linux 基础"></a>linux 基础</h1><h2 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h2><h3 id="1-ls-list"><a href="#1-ls-list" class="headerlink" title="1 ls list"></a>1 <strong>ls</strong> list</h3><p><code>command [-options] parameter ...</code><br>对于选项通常会带‘-’号，-h，有时也会用‘–’使用完整全名，–help</p><p><code>ls -l</code> 显示详情信息<br><code>ls -a</code> 显示隐藏文件<br><code>ls -R</code> 显示子目录文件<br><code>ls -F</code> 显示文件类型<br>-F选项会在目录名之后添加正斜线（&#x2F;），以方便用户在输出中分辨。类似地，它还会在可执行文件（比如上面的my_script文件）之后添加星号（*），以帮助用户找出可在系统中运行的文件<br><code>ls -i</code> 显示文件inode编码</p><p><strong>通配符</strong></p><p><code>ls -l t?st</code> 替代一个字符<br><code>ls -l t*st</code> 替代多个字符<br><code>ls -l t[abc]st</code> 用abc替代<br><code>ls -l t[a-c]st</code> 用a到c替代<br><code>ls -l t[!d]st</code> 用除了d替代<br>pwd print working directory<br><code>pwd -P</code> 如果你在一个链接文件夹内，单纯的pwd会出现错误的位置，加个-P选项就会获得正确的路径了</p><h3 id="2-处理文件"><a href="#2-处理文件" class="headerlink" title="2 处理文件"></a>2 处理文件</h3><p><code>touch test</code> 创建一个空文件<br><code>rm -f</code>强制删除<br><code>cp -R Document/ NewDocument/</code> 在执行cp –R命令之前，目录NewDocuments并不存在。它是随着cp –R命令被创建的，整个Documents目录中的内容都被复制到其中。<br><font color="Chocolate"><strong><code>ln -s file slink_file</code> 创建软链接，相当于快捷方式</strong></font><br><code>cp -i file1 file2</code> <strong>-i</strong>的选项是在执行操作时问询<br>例如：<code>rm -i</code><br><code>mv -i</code></p><p><code>mkdir -p /path/to/new/dir</code> 根据需要创建缺失的父目录 即如果你只有&#x2F;path，这个命令会自动创建&#x2F;path&#x2F;to，&#x2F;path&#x2F;to&#x2F;new，path&#x2F;to&#x2F;new&#x2F;dir文件夹</p><h3 id="3-查看文件内容"><a href="#3-查看文件内容" class="headerlink" title="3 查看文件内容"></a>3 查看文件内容</h3><p><code>file .bashrc</code>查看文件类型甚至是软链接的位置<br><code>cat -n file </code>查看文本并加上行数<br><code>less file</code> 查看大段文本<br><code>tail -n 5 file </code>or<code>tail -5 file </code>查看最后5行<br><code>head -n 5 file </code>or<code>head -5 file </code>查看开始5行<br><code>tail -f file</code> 该选项允许你在其他进程使用此文件时查看文件的内容。tail命令会保持活动状态并持续地显示添加到文件中的内容。这是实时监测系统日志的绝佳方式。</p><hr><h2 id="二、数据管理"><a href="#二、数据管理" class="headerlink" title="二、数据管理"></a>二、数据管理</h2><h3 id="1-数据排序"><a href="#1-数据排序" class="headerlink" title="1 数据排序"></a>1 数据排序</h3><p><code>sort file</code>默认情况下，sort命令会依据会话所指定的默认语言的排序规则来对文本文件中的数据行进行排序<br><code>sort -n file</code> 将数字按值排序升序<br><code>sort -nr file</code> 将数字按值排序逆序<br><code>sort -M file</code> 含有时间戳日期的文件按默认的排序方法来排序  </p><h3 id="2数据搜索"><a href="#2数据搜索" class="headerlink" title="2数据搜索"></a>2数据搜索</h3><p><code>grep [options] pattern [file]</code>grep命令输出了匹配该模式的整行<br><code>grep -v t file</code> 输出不包含t的行<br><code>grep -n t file</code> 输出包含t的行及行号<br><code>grep -c t file</code> 输出包含t的行数<br><code>grep -e t -e r file</code> 输出包含t和r的行  </p><h3 id="3命令别名"><a href="#3命令别名" class="headerlink" title="3命令别名"></a>3命令别名</h3><p><code>alias -p</code> 查看能使用的别名<br><code>alias li=&#39;ls -i --color=auto&#39;</code> 创建别名并使用色彩自动编码<br><code>unalias li</code> 删除别名 如果被删除的别名不是你设置的，那么等下次重新登录系统的时候，该别名就会再次出现。可以通过修改环境文件永久地删除某个别名。  </p><p><font color="Chocolate"><em>这个在.bashrc文件中修改后，可以在每次启动终端的时候就运行命令，从而不用每次都要重新命名别名，在输入登录命令这种很长而且不用修改的命令的时候，指定一个别名会是一个优雅的操作</em></font></p><hr><h2 id="三、环境变量"><a href="#三、环境变量" class="headerlink" title="三、环境变量"></a>三、环境变量</h2><h3 id="设定变量"><a href="#设定变量" class="headerlink" title="设定变量"></a>设定变量</h3><p>全局环境变量对于shell会话和所有生成的子shell都是可见的。局部环境变量则只对创建它的shell可见。</p><ul><li>设置局部变量<br><code>my_variable=&quot;Hello World&quot;</code> 在变量名、等号和值之间没有空格</li><li>设置全局变量<br><code>export my_variable=&quot;Hello World&quot;</code> export命令使其变成了全局环境变量。<br>这个可以作为在多个脚本之间变量的交换，在大型脚本中或许很有用</li></ul><p>-删除环境变量<br><code>unset my_variable</code> </p><hr><h2 id="四、构建基础脚本"><a href="#四、构建基础脚本" class="headerlink" title="四、构建基础脚本"></a>四、构建基础脚本</h2><p>让两个命令一起运行，可以将其放在同一行用分号隔开<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;0..8&#125;; <span class="hljs-keyword">do</span> <span class="hljs-built_in">cd</span> condor_prime1v2_<span class="hljs-variable">$&#123;i&#125;</span>; <span class="hljs-built_in">source</span> SplitAndRun.sh; <span class="hljs-built_in">cd</span> ..; <span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><h3 id="1-echo命令"><a href="#1-echo命令" class="headerlink" title="1 echo命令"></a>1 <strong>echo命令</strong></h3><ul><li>在默认情况下，无须使用引号将要显示的字符串划定出来<br><code>echo this is a test</code></li><li>echo命令可用单引号或双引号来划定字符串 <code>echo &quot;this&#39;s a test&quot;</code><br><code>echo -n</code> 字符串和命令输出显示在同一行中，即不换行</li></ul><h3 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2 自定义变量"></a>2 <strong>自定义变量</strong></h3><ul><li>变量名区分大小写  </li><li>使用等号为变量赋值。<strong>在变量、等号和值之间不能出现空格<code>a=1; str=&quot;test&quot;</code></strong></li></ul><h3 id="3-命令替换"><a href="#3-命令替换" class="headerlink" title="3 命令替换"></a>3 <strong>命令替换</strong></h3><p>从命令输出中提取信息并将其赋给变量 </p><ul><li>反引号(&#96;) <em>这个可以显示自己是个高手，但更推荐用下面那个，因为与其他变量命名格式类似</em></li><li>$()格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">today=$(<span class="hljs-built_in">date</span> +%y%m%d) <span class="hljs-comment">#会以两位数输出日期240116</span><br><span class="hljs-built_in">cat</span> <span class="hljs-built_in">log</span> &gt; <span class="hljs-built_in">log</span>.<span class="hljs-variable">$today</span><br></code></pre></td></tr></table></figure><p><em>Tips</em><br><code>yy</code>复制一行<br><code>p</code>粘贴一行<br><code>u</code>撤销上次操作<br><code>.</code>重复上次操作<br><code>/test</code>搜索test<br><code>:</code>末行模式，可以进行更多的操作<br><code>:1</code>定位到第一行<br><code>:$</code>定位到最后一行<br><code>:.,.+5w test.tst</code>当前行到之后的五行输出为test.txt</p><h3 id="4-数学运算"><a href="#4-数学运算" class="headerlink" title="4 数学运算"></a>4 <strong>数学运算</strong></h3><p>用方括号将数学运算的结果赋予变量<code>a=$[(1+1)*2]</code>  但bash shell只支持整数运算<br><em>浮点计算</em></p><ul><li>bc计算器<br>通过<code>bc</code>访问bash计算器，通过<code>quit</code>退出计算器  </li><li>在脚本中使用bc<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4; 3.4 / 5&quot;</span> | bc) <span class="hljs-comment">#scale设置为4为小数</span><br></code></pre></td></tr></table></figure></li><li><strong>双括号(())</strong> 双括号里面的语句可以使用高级的数学表达式，并且不用转义大于号之类的 &gt; <ul><li><em>我觉得一般情况下可以无脑用双括号，浮点数用bc就行</em></li></ul></li></ul><p><strong>退出状态码</strong><br><code>echo $?</code> 保存最后一个已执行命令的退出状态码,无报错状态码为0  </p><hr><h2 id="五、结构化命令"><a href="#五、结构化命令" class="headerlink" title="五、结构化命令"></a>五、结构化命令</h2><h3 id="1-if-then"><a href="#1-if-then" class="headerlink" title="1 if-then"></a>1 if-then</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> <span class="hljs-comment">#如果if语句行命令的退出状态值为0</span><br><span class="hljs-keyword">then</span> <br>commands <span class="hljs-comment">#那么代码块中的命会被执行</span><br><span class="hljs-keyword">else</span> <br>commands <span class="hljs-comment">#否则，会执行else部分</span><br><span class="hljs-keyword">fi</span> <br><span class="hljs-comment">#嵌套结构</span><br><span class="hljs-keyword">if</span> command1 <span class="hljs-keyword">then</span> <br>commands <span class="hljs-keyword">elif</span> command2 <span class="hljs-keyword">then</span><br>commands <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>数值比较</strong><br><em>用到方括号的语句不多，基本上除了条件判断时用到，其他都用圆括号</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n1</span> -gt <span class="hljs-variable">$n2</span> ] <br><span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$n1</span><br><span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$n2</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">condition</th><th align="center">describe</th></tr></thead><tbody><tr><td align="center">n1 -eq n2</td><td align="center">n1 &#x3D; n2</td></tr><tr><td align="center">n1 -ge n2</td><td align="center">n1 &gt;&#x3D; n2</td></tr><tr><td align="center">n1 -gt n2</td><td align="center">n1 &gt; n2</td></tr><tr><td align="center">n1 -le n2</td><td align="center">n1 &lt;&#x3D; n2</td></tr><tr><td align="center">n1 -lt n2</td><td align="center">n1 &lt; n2</td></tr><tr><td align="center">n1 -ne n2</td><td align="center">n1 !&#x3D; n2</td></tr></tbody></table></li><li><p><strong>字符串比较</strong></p></li></ul><table><thead><tr><th align="center">condition</th><th align="center">describe</th></tr></thead><tbody><tr><td align="center">str1 &#x3D; str2</td><td align="center">str1与str2是否一致</td></tr><tr><td align="center">str1 !&#x3D; str2</td><td align="center">str1与str2是否不一致</td></tr><tr><td align="center">str1 &lt; str2</td><td align="center">**</td></tr><tr><td align="center">str1 &gt; str2</td><td align="center">**</td></tr><tr><td align="center">-n str1</td><td align="center">检查str1的长度是否不为0</td></tr><tr><td align="center">-z str1</td><td align="center">检查str1的长度是否为0</td></tr></tbody></table><ul><li><p><em>一个字符串是否大于或小于另一个字符串</em>  </p><ul><li>大于号和小于号必须<strong>转义</strong><code>str1 \&gt; str2</code>，否则shell会将其视为重定向符  </li><li>大小比较的是字符的Unicode的编码值   </li><li>大于和小于顺序与sort命令所采用的不同</li></ul></li><li><p><strong>布尔运算符号</strong><br>&amp;&amp; and<br>|| or</p></li></ul><p> <strong>高级应用</strong>  </p><ul><li><strong>双括号(())</strong> 双括号里面的语句可以使用高级的数学表达式，并且不用转义大于号之类的 &gt;</li><li><strong>case命令</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span> choice <br><span class="hljs-keyword">case</span> <span class="hljs-variable">$choice</span> <span class="hljs-keyword">in</span><br>    a)<br>    <span class="hljs-built_in">command</span><br>    ;;<br>    b)<br>    <span class="hljs-built_in">command</span><br>    ;;<br>    *)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no choice&quot;</span><br>    ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-for"><a href="#2-for" class="headerlink" title="2 for"></a>2 for</h3><ul><li>for a in <em>list</em>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">list=abc <span class="hljs-string">&quot;ab&#x27;c&quot;</span> <span class="hljs-string">&quot;ab c&quot;</span> <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> abc <span class="hljs-string">&quot;ab&#x27;c&quot;</span> <span class="hljs-string">&quot;ab c&quot;</span><br><span class="hljs-keyword">do</span> <br>  <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br>file=<span class="hljs-string">&quot;list.txt&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">cat</span> <span class="hljs-variable">$file</span>) <span class="hljs-comment">#会依据特定的字段分隔符遍历，分隔符：空格、制表符、换行符</span><br>IFS=$<span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-comment">#可以指定换行符为分隔符，这样就能跳过字段中的空格和制表符</span><br>IFS=$<span class="hljs-string">&#x27;\n:&#x27;</span> <span class="hljs-comment">#这样就指定换行符与冒号作为字段分隔符</span><br></code></pre></td></tr></table></figure></li><li>for a in <em>range</em><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((a=<span class="hljs-number">1</span>,b=<span class="hljs-number">10</span>;a&lt;=<span class="hljs-number">10</span>;a++.b--)) <span class="hljs-comment">#仿c语言的shell命令</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="3-while与until"><a href="#3-while与until" class="headerlink" title="3 while与until"></a>3 <code>while</code>与<code>until</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=3<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span> <span class="hljs-comment">#这里只是展示可以放在while里面</span><br>  [ <span class="hljs-variable">$a</span> -ge 0 ] <span class="hljs-comment">#这里需要与方括号空一格</span><br><span class="hljs-keyword">do</span><br>  a=$[<span class="hljs-variable">$a</span>-1] <span class="hljs-comment">#这里赋值时不能空格，但可以与方括号空一格，或者按照之前说的惯例用圆括号赋值，这样方便记忆一点 a=$(($a-1))</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">until</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span> <br>  [ <span class="hljs-variable">$a</span> -eq 0 ]<br><span class="hljs-keyword">do</span><br>  a=$[<span class="hljs-variable">$a</span>-1]<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-break-and-continue"><a href="#4-break-and-continue" class="headerlink" title="4 break and continue"></a>4 <code>break</code> and <code>continue</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((a=<span class="hljs-number">1</span>;a&lt;<span class="hljs-number">4</span>;a++))<br><span class="hljs-keyword">do</span> <br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -eq 2 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">continue</span> <span class="hljs-comment">#continue会中止这次循环，从头开始</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">for</span> ((b=<span class="hljs-number">1</span>;b&lt;<span class="hljs-number">4</span>;b++))<br>  <span class="hljs-keyword">do</span> <br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$b</span> -eq 2 ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">break</span> 2 <span class="hljs-comment">#默认下break只会终止一层循环，后面加数字2意味着终止向外的第二层循环</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span> &gt; test.txt <span class="hljs-comment">#你可以将循环结果输出到一个文件内，或用管道传给其他命令如：done | sort 即将输出进行排序</span><br></code></pre></td></tr></table></figure><h3 id="5-read"><a href="#5-read" class="headerlink" title="5 read"></a>5 <code>read</code></h3><p><code>echo -n</code> 字符串和命令输出显示在同一行中，即不换行<br><code>read -p</code> 可以指定提示字符<br><code>read -t 5</code> 当时间超过5s没有输入就会返回非0退出状态码<br><code>read -n 1</code> 统计输入的字符数为1时自动退出并赋值<br><code>read -s</code> 不会显示输入的数据，用于密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;enter your name:&quot;</span><br><span class="hljs-built_in">read</span> name<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;enter your name:&quot;</span> first last <span class="hljs-comment">#两个方式一样，但这种方式能分配多个变量</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">read</span> -t 5 -p <span class="hljs-string">&quot;enter your name:&quot;</span> first last<br><span class="hljs-keyword">then</span> <br><span class="hljs-keyword">else</span> <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;time out&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">read</span> -n 1 -p <span class="hljs-string">&quot;enter y/n&quot;</span> chose<br></code></pre></td></tr></table></figure><hr><h2 id="六-输出与输入"><a href="#六-输出与输入" class="headerlink" title="六.输出与输入"></a>六.输出与输入</h2><p>一个命令会将输出显示在终端显示器上，正确的输出会指向STDOUT文件，错误的输出会指向STDERR文件  </p><ul><li>标准文件描述符<br>0 标准输入 1 标准输出 2 标准错误<br><code>ls file1 file2 file3 1&gt;out 2&gt;err</code> 1指向正确的输出，2指向错误的输出 不指定的话正确与错误都会输出到终端上<br><code>ls file1 file2 file3 &amp;&gt;both</code> &amp;会输出二者</li><li>重定向输出<br>如果你有意在脚本中生成错误消息，可以将单独的一行输出重定向到STDERR。这只需要使用输出重定向符号将输出重定向到STDERR文件描述符。在重定向到文件描述符时，必须在文件描述符索引值之前加一个&amp;：<br><code>echo &quot;This is an error message&quot; &gt;&amp;2</code></li><li>exec命令<br>exec命令会启动一个新shell并将STDOUT文件描述符重定向到指定文件，例如 <code>exec 2&gt;error</code><br><code>exec 0&lt;inputfile</code> 这让脚本可以在文件testfile中而不是键盘上获取输入，之前的read命令就是从STDIN读取数据0，即通过键盘输入的数据，这里将0重定向为inputfile就意味着会从这里读取数据。<br><code>exec 3&gt;file3out</code> 你可以自定义一个描述符 这样在之后就能让你想要输出的输出到3这个符号内<code>echo &quot;This should be stored in a file&quot; &gt;&amp;3</code>可以维持显示器的正常输出，并将特定信息重定向到指定文件（比如日志文件）  </li><li>神奇的小功能  <ul><li><p><code>/dev/null</code>就像是一个垃圾桶<br><code>echo &quot;This is an error message&quot; &gt; /dev/null</code>这样就能丢弃这个数据<br><code>cat /dev/null &gt; testfile</code> 这样就能直接清除文件内容，而不需要重新创建</p></li><li><p><code>mktemp testfile.XXXXXX</code>会任意填入字符并创建<em>文件</em><br><code>mktemp -t testfile.XXXXXX</code> 会在系统的临时目录&#x2F;tmp&#x2F;test.XXXXXX创建文件<br><code>mktemp -d testdir.XXXXXX</code>会任意填入字符并创建<em>文件夹</em></p></li><li><p><code>tee test</code>像是一个T转接口<br><code>data | tee test</code>这样会同时输出到屏幕上和test文件内(&gt;test)<br><code>data | tee -a test</code>不会覆盖test(&gt;&gt;test)</p></li></ul></li></ul><hr><h2 id="七、脚本运行"><a href="#七、脚本运行" class="headerlink" title="七、脚本运行"></a>七、脚本运行</h2><h3 id="1-系统信号与产生"><a href="#1-系统信号与产生" class="headerlink" title="1 系统信号与产生"></a>1 系统信号与产生</h3><table><thead><tr><th align="center">sig</th><th align="center">value</th><th align="center">mean</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">SIGHUP</td><td align="center">挂起</td></tr><tr><td align="center">2</td><td align="center">SIGINT</td><td align="center">中断 -&gt; Ctrl+C</td></tr><tr><td align="center">3</td><td align="center">SIGQUIT</td><td align="center">停止</td></tr><tr><td align="center">9</td><td align="center">SIGKILL</td><td align="center">无条件终止  -&gt; kill -9 PID</td></tr><tr><td align="center">20</td><td align="center">SIGTSTP</td><td align="center">停止或暂停但不终止 -&gt; Ctrl+Z</td></tr></tbody></table><ul><li>trap命令 trap <em>command</em> <em>signals</em><br><code>trap &quot;echo &#39;trapped Ctrl+C&#39;&quot; SIGINT</code> 输入Ctrl+C并不会停止脚本而是执行echo命令，这样可以防止命令被打断</li></ul><h3 id="2-脚本后台运行"><a href="#2-脚本后台运行" class="headerlink" title="2 脚本后台运行"></a>2 脚本后台运行</h3><p><code>&amp;</code>在一条命令后面加&amp;就能使命令后台运行，并通过对1，2的重定向，使终端不显示信息而达到完全静默<br><code>ps</code>可以查看目前的作业信息<br><code>jobs</code>更推荐jobs命令查看作业情况并有一些命令行选项<br>  <code>-l PID</code> | <code>-r running</code> | <code>-s stopped</code><br><em>Tips: jobs命令输出中的加号和减号。带有加号的作业为默认作业。如果作业控制命令没有指定作业号，则引用的就是该作业。<br>带有减号的作业会在默认作业结束之后成为下一个默认作业。任何时候，不管shell中运行着多少作业，带加号的作业只能有一个，带减号的作业也只能有一个。</em></p><hr><h2 id="八、高级脚本"><a href="#八、高级脚本" class="headerlink" title="八、高级脚本"></a>八、高级脚本</h2><ul><li>函数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> func1 &#123; <span class="hljs-comment">#定义一个函数</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;enter your number:&quot;</span> a<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> *2&quot;</span> |bc<br>&#125;<br>func1 <span class="hljs-comment">#直接调用func1</span><br>result=$(func1) <span class="hljs-comment">#将函数结果输出给$result</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nyour result is <span class="hljs-variable">$result</span>&quot;</span> <span class="hljs-comment">#-e 为转义选项，转义\n</span><br><br><span class="hljs-keyword">function</span> func2 &#123;<br>  <span class="hljs-comment">#local result=$(echo &quot;$1 * $2&quot; |bc) #local保证了变量只在函数中有效，函数之外的同名变量互不影响</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> * <span class="hljs-variable">$2</span>&quot;</span> |bc<br>&#125;<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -eq 2 ]; <span class="hljs-keyword">then</span>   <span class="hljs-comment">#`$#` 用于获取参数的个数</span><br>  result=$(func2 <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span>) <span class="hljs-comment">#你需要手动输入 例如：source test.sh 1.1 2</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;your result is <span class="hljs-variable">$result</span>&quot;</span> <br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;error&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li>数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#输入数组</span><br><span class="hljs-keyword">function</span> func3 &#123;<br>  <span class="hljs-built_in">local</span> myarray=($(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)) <span class="hljs-comment">#`$@` 用于展开参数列表</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;myarray[*]&#125;</span> <span class="hljs-comment">#表示将数组的所有元素作为单个参数展开，元素之间用第一个字符IFS的值分隔</span><br>&#125;<br>array=(1 2 3 4 5)<br><span class="hljs-comment">#array=(&quot;apple&quot; &quot;banana&quot; &quot;cat&quot;)</span><br>func3 <span class="hljs-variable">$&#123;array[*]&#125;</span><br><br><span class="hljs-comment">#输出数组</span><br><span class="hljs-keyword">function</span> func4 &#123;<br>  <span class="hljs-built_in">local</span> n=(<span class="hljs-variable">$#</span>)<br>  <span class="hljs-built_in">local</span> myarray=($(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>))<br>  <span class="hljs-built_in">local</span> newarray=($(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)) <span class="hljs-comment">#这里可能是想产生一个与myarray同样多数组的newarray，这样在之后的填入中才能做到依次替换</span><br>  <span class="hljs-keyword">for</span> (( i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-variable">$n</span>; i++))&#123;<br>    newarray[<span class="hljs-variable">$i</span>]=$((<span class="hljs-variable">$&#123;myarray[$i]&#125;</span> * <span class="hljs-number">2</span>))<br>  &#125;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;newarray[*]&#125;</span><br>&#125;<br>array=(1 2 3 4 5)<br>func4 <span class="hljs-variable">$&#123;array[*]&#125;</span><br></code></pre></td></tr></table></figure></li><li>递归<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> func5 &#123;<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -eq 1 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">local</span> x=$(( <span class="hljs-variable">$1</span> - <span class="hljs-number">1</span> ))  <span class="hljs-comment">#得到n-1</span><br>    <span class="hljs-built_in">local</span> result=$(func5 <span class="hljs-variable">$x</span>)<br>    <span class="hljs-built_in">echo</span> $((<span class="hljs-variable">$result</span> * <span class="hljs-variable">$1</span>)) <span class="hljs-comment">#</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-built_in">read</span> a<br><span class="hljs-built_in">echo</span> $(func5 <span class="hljs-variable">$a</span>)<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="九、sed-命令"><a href="#九、sed-命令" class="headerlink" title="九、sed 命令"></a>九、sed 命令</h2><p><font color="Chocolate"><em>需要注意的是，sed命令不会修改原始文件，只是在终端中的输出发生变化，你可以用重定向来输出sed修改后的文件或者用 -i 选项直接修改文件内容</em></font></p><ul><li><p>用于批量修改文本<br><code>sed &#39;s/old/new/&#39; test.txt</code>  s为替换命令<br><code>sed -e &#39;s/old1/new1/; s/old2/new2/&#39; test.txt</code>  多个修改，注意分号和单引号<br><code>sed -f txt.sed test.txt</code> 将<code>s/old1/new1/</code>放进txt.sed中，用-f选项可以进行大量修改<br><code>sed &#39;d&#39; test.txt</code> d为删除命令 <font color="red"><em>慎用</em> </font><br><code>sed &#39;i\指定文本&#39;</code>与<code>sed &#39;a\指定文本&#39;</code>分别在指定行前和指定行后增加一行内容  </p></li><li><p>命令组  <em>如果需要在单行中执行多条命令，可以用花括号将其组合在一起</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;/test/&#123;            </span><br><span class="hljs-string">&gt; =  </span><br><span class="hljs-string">&gt; p  </span><br><span class="hljs-string">&gt; &#125;&#x27;</span> test.txt<br></code></pre></td></tr></table></figure></li><li><p>替换标志<br><code>sed &#39;s/pattern/replacement/flags</code> flag为替换标志 有四种 可以写在一起</p><ul><li>数字 指定文中的第几处<br><code>echo -e &quot;test1 test1 test2 \ntest3 test4&quot;|sed &#39;s/test1/new/2&#39;</code><br>-&gt;test1 new test2<br>-&gt;test3 test4</li><li>g 替换所有<br><code>echo -e &quot;test1 test1 test2 \ntest3 test4&quot;|sed &#39;s/test1/new/g&#39;</code><br>-&gt;new new test2<br>-&gt;test3 test4</li><li>p 打印出替换后的行 <em>-n的意思是只打印匹配的行</em><br><code>echo -e &quot;test1 test1 test2 \ntest3 test4&quot;|sed -n &#39;s/test1/new/gp&#39;</code><br>-&gt;new new test2</li><li>w <em>file</em> 将替换结果写入文件</li><li><em><code>sed &#39;s|//ccc0|\nchain-&gt;Add(\&quot;$&#123;FILE_PATH&#125;\&quot;)|g&#39;</code>当&#x2F;会引起混乱时，可以使用别的一些符号分隔</em></li></ul></li><li><p>指定行地址  <em>对i和a同样适用</em></p><ul><li><code>sed &#39;2s/test1/new/&#39;</code>指定第2行</li><li><code>sed &#39;2,4s/test1/new/&#39;</code>指定2到4行</li><li><code>sed &#39;2,$s/test1/new/&#39;</code>指定2行之后 <em>$代表最后一行</em></li></ul></li><li><p>打印</p><ul><li>p <em>打印文本</em></li><li>&#x3D; <em>打印行号</em></li><li>| <em>列出行，可以打印出不可打印字符，例如\t</em></li></ul></li><li><p><code>sed -n &#39;/test/p&#39;</code>这个和<code>grep test</code>类似 前者更高级一点，可以使用正则表达式，见十一章</p></li></ul><hr><h2 id="十、gawk-命令"><a href="#十、gawk-命令" class="headerlink" title="十、gawk 命令"></a>十、gawk 命令</h2><p><em>是awk的增强版本</em><br><code>gawk &#39;&#123;print &quot;hello&quot;&#125;&#39;</code> 设hello为显示一行固定的文本字符串，因此不管在数据流中输入什么文本，你都会得到同样的文本输出<br><code>echo &quot;me:hello world&quot; |awk  &#39;&#123;print $1&#125;&#39; </code> -&gt;me:hello   默认以空格作为分隔符<br><code>echo &quot;me:hello world&quot; |awk -F: &#39;&#123;print $1&#125;&#39; </code>-&gt;me <font color="Chocolate"> <strong>-F: 可以指定:为分隔符</strong></font> -F’[:&#x2F;]’ 可以指定多个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<span class="hljs-keyword">for</span> test.gawk---<br>BEGIN &#123;<br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;title:character table&quot;</span><br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;character \t number&quot;</span><br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;---- \t ----&quot;</span><br>  &#125;<br>&#123;<br>  <span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span> <span class="hljs-string">&quot;\t&quot;</span> <span class="hljs-variable">$2</span> <br>&#125;<br>END &#123;<br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;end&quot;</span><br> &#125; <br>---<br>gawk -f test.gawk test.txt <span class="hljs-comment">#与sed的-f选项类似，你可以将命令写入文件</span><br></code></pre></td></tr></table></figure><h4 id="一些常见处理"><a href="#一些常见处理" class="headerlink" title="一些常见处理"></a>一些常见处理</h4><ul><li>数学表达式<br><code>gawk &#39;$1 == 0 &#123;print $0&#125;&#39;</code>意味着第一列为0则输出整行</li><li>if 语句<br><code>gawk &#39;&#123;if ($1 &gt; 2) print $1&#125;&#39; </code><br><code>gawk &#39;&#123;if ($1 &gt; 2) &#123;a = $1 *2 ; print a&#125; else &#123;print $2&#125;&#125;&#39; test.txt </code></li><li>while,for 语句 <em>类似if</em></li></ul><h4 id="printf-格式化打印"><a href="#printf-格式化打印" class="headerlink" title="printf 格式化打印"></a>printf 格式化打印</h4><p><em>需要添加换行符，否则会在同一行输出</em></p><blockquote><p>printf “<em>format string”, var1, var2​​</em><br>  其中<em>format string</em>格式为 <em>%[modifier]control-letter</em><br>  <font color="Chocolate">%d或%i显示整数<br>  %e科学计数<br>  %f显示浮点 %2.1f保留一位小数<br>  %s显示字符串</font></p></blockquote><p><code>gawk &#39;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;printf &quot;%s &quot;, $1&#125; END&#123;printf &quot;\n&quot;&#125;&#39; </code>设定,为分隔符，打印第一列字符，由于没有换行，在最后输出一个换行符，这样第一列的字符都会输出在同一行内   </p><p><code>gawk &#39;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;printf &quot;%-16s %s\n&quot;, $1, $4&#125;&#39; data2￼</code> %16s 即输出宽度为16字符右对齐 %-16s 左对齐</p><blockquote><p>Ima Test<br>123 Main Street<br>Chicago, IL 60601<br>(312)555-1234￼</p><p>Frank Tester￼<br>456 Oak Street<br>Indianapolis, IN 46201￼<br>(317)555-9876￼</p></blockquote><p><em>默认情况下，RS是换行符 \n，表示记录是一行。这里将RS设为空白意味着，出现空白行之前看为一行，以换行符为分隔符，第4列即为电话列</em></p><hr><h2 id="十一、正则表达式"><a href="#十一、正则表达式" class="headerlink" title="十一、正则表达式"></a>十一、正则表达式</h2><h3 id="能用在sed与gawk"><a href="#能用在sed与gawk" class="headerlink" title="&gt; 能用在sed与gawk"></a>&gt; 能用在sed与gawk</h3><ul><li>锚点字符<ul><li><code>^</code>锚定行首<br><code>sed -n &#39;/^this/p&#39;</code>这个只会匹配每行开头为this的行</li><li><code>$</code>锚定行尾<br><code>sed -n &#39;/end$/p&#39;</code>这个只会匹配每行结尾为this的行</li><li>组合锚点 删除空白行<br><code>sed &#39;/^$/d&#39;</code><font color="Chocolate">强烈推荐 </font></li></ul></li><li>点号字符<br><em>点号字符可以匹配除换行符之外的任意单个字符。点号字符必须匹配一个字符</em></li><li>字符组 []<br><code>echo &quot;Yes&quot; | sed -n &#39;/[Yy]es/p&#39;￼</code><br><code>sed -n &#39;^[0-9][0-9]$/p&#39;</code> 这样可以匹配两位数<br><code>sed -n &#39;[^ch]at$/p&#39;</code> ^放到方括号内代表将其排除在外</li><li>星号 <em>星号表明前面的字符可以出现0次或多次</em><br><code>echo &quot;ik&quot; | sed -n &#39;/ie*k/p&#39;</code> 这样依然可以匹配到</li></ul><h3 id="不能用在sed"><a href="#不能用在sed" class="headerlink" title="&gt; 不能用在sed"></a>&gt; 不能用在sed</h3><ul><li>问号 <em>问号表明前面的字符可以出现0次或1次</em></li><li>加号 <em>加号表明前面的字符可以出现1次或多次</em></li><li>花括号 {m,n} <em>表明前面的字符可以出现m次到n次</em><br>在默认情况下，gawk不识别正则表达式区间，必须指定gawk的命令行选项–re-interval才行。<br><code>echo &quot;beet&quot; | gawk --re-interval &#39;/be&#123;1&#125;t/&#123;print $0&#125;&#39;</code></li><li>竖线 <em>竖线代表or</em><br><code>gawk &#39;/cat|dog/&#123;print $0&#125;&#39;</code></li><li>表达式分组 ()<br><code>gawk &#39;/(c|b)a(b|t)/&#123;print $0&#125;&#39;￼</code></li></ul><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><em>一些乱七八糟的笔记，不保证正确性</em></p><p>du -sh .<br>sed -i “s&#x2F;forward0&#x2F;forward&#x2F;g” crab3_forward0_Ntuple.py<br><code>grep -o &quot;$FIELD&quot; &quot;$FILE&quot; | wc -l</code>   出现次数<br><code>grep -A 5 &quot;$FIELD&quot;  &quot;$FILE&quot;</code>   出现后5行内容<br>kill $(jobs -p)<br>condor_rm -all<br>condor_rm -all -name lpcschedd6.fnal.gov lpc上删除condor jobs</p><p>ls -lhtr  命令会以人类可读的方式，按照修改时间的倒序，列出当前工作目录中的所有文件和子目录的详细信息。这样可以方便地查看最近修改过的文件。<br>cat ion.C |wc 确定ioc的行数  </p><p>s&#x2F;old&#x2F;new&#x2F;gc 替换整个文件中出现的所有old，并在每次替换时提示。  </p><p>在终端中编写shell脚本.sh文件时，可以使用以下方法来实现多行同时缩进：</p><ol><li>使用vim打开你的shell脚本文件，然后按ESC键进入命令模式。</li><li>按下ctrl+v键进入可视块模式，然后使用上下键选中你想要缩进的多行代码。</li><li>按下shift+i键进入插入模式，然后连续敲击空格键来添加缩进（注意这个时候只有一行会显示缩进）。</li><li>最后按下esc键，你会发现所有选中的行都被缩进了1。<br>如果你想要删除多行前面的空格，可以按照以下步骤操作：</li><li>同样先按下ctrl+v键进入可视块模式，然后使用上下左右键选中你想要删除空格的多行代码以及前面的空格。</li><li>然后按下del键即可删除选中的空格1。</li></ol><p>chmod -R 755 public&#x2F;  设置文件夹及子文件夹的权限为rwxr-xr-x<br>r：read，可读取此文件的内容，即可以打开文件；<br>w：write，可编辑此文件的内容，如可以增加、删除、更改文件内容；<br>x：execute，可以执行此文件。<br>￼<img src="/postfigure/linux/4.png" alt="1"></p><p>将cds上的root数据文件拷到服务器上<br>xrdcp -d 1 -f root:&#x2F;&#x2F;xrootd-cms.infn.it&#x2F;&#x2F;</p><p>.h 头文件可以用crab那一步的cmsRun 产生的mymultilep.root文件获取<br>root &#x2F;path&#x2F;***.root<br>.ls      &#x2F;&#x2F;mkcands<br>mkcands-&gt;cd()<br>.ls      &#x2F;&#x2F;X_data<br>X_data-&gt;MakeClass(“myntuple”)<br><img src="/postfigure/linux/Attaching.png" alt="2"></p><p>Lpc会有时用不了有些命令<br>source &#x2F;cvmfs&#x2F;cms.cern.ch&#x2F;cmsset_default.sh<br>source &#x2F;cvmfs&#x2F;cms.cern.ch&#x2F;crab3&#x2F;crab.sh</p><p>修改路径；清除；<br>scramv1 b  ProjectRename<br>scramv1 b clean<br>scramv1 b  </p><p>删除重复行<br>cat hh.txt | sort -g -k7 | uniq</p><p>disown -h %1无敌的代码，我愿称之为神！后台挂起序号1的job，并且断线不发送停止代码，之前后台挂着，断线就会结束job</p><p><img src="/postfigure/linux/linux.png" alt="linux命令行与shell脚本编程大全"><br>本文参考这本书，如果有疑问请自行下载查阅<br><a href="https://zh.z-library.se/book/15316978/c14dce/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%A4%A7%E5%85%A8-%E7%AC%AC3%E7%89%88-%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6.html">linux命令行与shell脚本编程大全</a></p><hr><p>END</p><div style="text-align: right;"> written by zhuf </div><hr><h1 id="linux-进阶与服务器管理"><a href="#linux-进阶与服务器管理" class="headerlink" title="linux 进阶与服务器管理"></a>linux 进阶与服务器管理</h1><h2 id="零、一些小知识对之前的补充"><a href="#零、一些小知识对之前的补充" class="headerlink" title="零、一些小知识对之前的补充"></a>零、一些小知识对之前的补充</h2><ul><li><p>语言<br><code>locale</code> 显示当前的语系<br>LANG&#x3D;”zh_CN.UTF-8”<br>LC_COLLATE&#x3D;”zh_CN.UTF-8”<br>LC_CTYPE&#x3D;”zh_CN.UTF-8”<br>LC_MESSAGES&#x3D;”zh_CN.UTF-8”<br>LC_MONETARY&#x3D;”zh_CN.UTF-8”<br>LC_NUMERIC&#x3D;”zh_CN.UTF-8”<br>LC_TIME&#x3D;”zh_CN.UTF-8”<br>LC_ALL&#x3D;</p><p><code>LANG=en_US.utf8</code> 修改输出信息为英文<br><code>export LC_ALL=en_US.utf8</code>同步更新LC_ALL</p></li><li><p>man指令<br>当你不知道一个命令的用法，“男人”一下，你就知道，显示的手册（manual）通常会分为以下的几个部分</p></li></ul><table><thead><tr><th align="center">代号</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">NAME</td><td align="center">简短的指令说明，左上角除了指令外括号里面还会有一些数字，这几个比较重要：1，使用者可执行指令或文件；5，配置文件或某文件的格式；8，系统管理员可用的指令</td></tr><tr><td align="center">SYNOPSIS</td><td align="center">简短的指令语法</td></tr><tr><td align="center">DESCRIPTION</td><td align="center">完整说明</td></tr><tr><td align="center">COMMANDS</td><td align="center">当程序执行时，可以在程序中下达这个指令</td></tr></tbody></table><ul><li><p>文件权限<br>linux的每个文件都有User,Group,Others三种身份的权限，<code>ls -al</code>查看文件权限<br><img src="/postfigure/linux/image-7.png" alt="Alt text"><img src="/postfigure/linux/image-8.png" alt="Alt text"><br>文件类型  [d] 目录  [-]文件 [l]链接文件 </p></li><li><p>改变文件属性</p><ul><li>chgrp 改变文件所属群组<br>在<code>/etc/group</code>中是存在的群组名，用<code>chgrp [group name] [file name]</code>就可以将对应文件</li><li>chown 改变文件拥有者<br>在<code>/etc/passwd</code>中是存在的使用者，用<code>chown -R [user name] [dirname/filename]</code>或者<code>chown -R [user name]:[group name] [dirname/filename]</code>可以修改群组和使用者所属，-R代表递归</li><li>chmod 改变文件的权限<br>文件权限用数字加和的方式表示 r:4 w:2 x:1<br><font color="Chocolate"><em>一些常用的权限数字</em></font><br>755 将文件变为可执行文件，但不让其他人修改<br>740 将文件不被别人看到</li></ul></li><li><p>一些指令<br><code>who</code>能看到谁在偷偷工作<br><code>df</code> 系统中设备的使用情况</p></li></ul><h2 id="一、linux-文件与目录"><a href="#一、linux-文件与目录" class="headerlink" title="一、linux 文件与目录"></a>一、linux 文件与目录</h2><h3 id="1-1-root-根目录"><a href="#1-1-root-根目录" class="headerlink" title="1.1  &#x2F; (root)根目录"></a>1.1  &#x2F; (root)根目录</h3><table><thead><tr><th align="center">目录</th><th align="center">放置文件内容</th></tr></thead><tbody><tr><td align="center">&#x2F;bin</td><td align="center">bin下放置的是一些操作指令，比如cat, mv,cp</td></tr><tr><td align="center">&#x2F;boot</td><td align="center">放置开机配置文件</td></tr><tr><td align="center">&#x2F;etc</td><td align="center">系统的配置文件，包括人员账号密码</td></tr><tr><td align="center">&#x2F;lib</td><td align="center">放置函数库</td></tr><tr><td align="center">&#x2F;tmp</td><td align="center">正如其名，是临时文件</td></tr><tr><td align="center">&#x2F;usr</td><td align="center">(Unix Software Resource)一些系统默认的软件，类似window的C盘</td></tr><tr><td align="center">&#x2F;dev</td><td align="center">linux中每个设备都被当成一个文件，这个就是设备文件</td></tr></tbody></table><p>软件源有很多，可以使用一些<a href="https://zhuanlan.zhihu.com/p/421178143">国内源</a><br><code>/etc/apt/sources.list</code> or <code>/etc/apt/sources.list.d/</code> 放的是软件源链接<br><code>sudo apt-get update</code>  通过这个命令更新软件源</p><h3 id="1-2-PATH-可执行文件路径的变量"><a href="#1-2-PATH-可执行文件路径的变量" class="headerlink" title="1.2 $PATH 可执行文件路径的变量"></a>1.2 $PATH 可执行文件路径的变量</h3><p>当执行一个指令的时候“ls”，系统会依照PATH的设置去每个定义的目录下寻找文件名为ls的可执行文件进行指令执行。<br>以$PATH<code>/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</code>为例，如果用root权限将&#x2F;bin&#x2F;ls移动到&#x2F;root文件夹下，这样的情况下就不能执行<code>ls</code>命令了，只有当你用这样的命令<code>PATH=&quot;$&#123;PATH&#125;:/root&quot;</code>，将&#x2F;root下的ls路径加入到$PATH中之后，才能正确的执行ls命令<br>如果有两个ls，则在$PATH中的目录先搜索到的ls会被执行</p><p>未完成。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
